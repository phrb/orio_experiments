
====== START ORIO ======

----- begin reading the source file: atax2.src1.c -----
----- finished reading the source file -----

----- begin parsing annotations -----
----- finished parsing annotations -----

----- begin optimizations -----
Search_Space         = 8.234e+13
Number_of_Parameters = 18
Numeric_Parameters   = 13
Binary_Parameters    = 05
['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
[[1, 16, 32, 64, 128, 256, 512], [1, 16, 32, 64, 128, 256, 512], [1, 16, 32, 64, 128, 256, 512], [1, 64, 128, 256, 512, 1024, 2048], [1, 64, 128, 256, 512, 1024, 2048], [1, 64, 128, 256, 512, 1024, 2048], [False, True], [False, True], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 8, 32], [1, 8, 32], [1, 8, 32], [False, True], [False, True], [False, True]]

----- begin empirical tuning for problem size -----
 N = 10000
Parameters: {'ACOPY_x': [0, 2], 'ACOPY_y': [0, 2], 'RT_K': [0, 3], 'T1_I': [0, 7], 'T1_J': [0, 7], 'T1_K': [0, 7], 'U_K': [0, 30], 'U_J': [0, 30], 'U_I': [0, 30], 'U1_I': [0, 30], 'T2_K': [0, 7], 'T2_J': [0, 7], 'T2_I': [0, 7], 'VEC2': [0, 2], 'VEC1': [0, 2], 'RT_I': [0, 3], 'SCR': [0, 2], 'RT_J': [0, 3]}
Parameter Range Values: {'ACOPY_x': [False, True], 'ACOPY_y': [False, True], 'RT_K': [1, 8, 32], 'T1_I': [1, 16, 32, 64, 128, 256, 512], 'T1_J': [1, 16, 32, 64, 128, 256, 512], 'T1_K': [1, 16, 32, 64, 128, 256, 512], 'U_K': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_J': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U1_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'T2_K': [1, 64, 128, 256, 512, 1024, 2048], 'T2_J': [1, 64, 128, 256, 512, 1024, 2048], 'T2_I': [1, 64, 128, 256, 512, 1024, 2048], 'VEC2': [False, True], 'VEC1': [False, True], 'RT_I': [1, 8, 32], 'SCR': [False, True], 'RT_J': [1, 8, 32]}

----- begin random search -----
Initial Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Initial Inverse Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K']
Starting DOPT-anova
Step 0
Generating valid search space of size 4600 (does not spend evaluations)
Tested coordinates: 10000
Tested coordinates: 20000
Tested coordinates: 30000
Valid coordinates: 920
Tested coordinates: 40000
Tested coordinates: 50000
Tested coordinates: 60000
Tested coordinates: 70000
Valid coordinates: 1840
Tested coordinates: 80000
Tested coordinates: 90000
Tested coordinates: 100000
Tested coordinates: 110000
Valid coordinates: 2760
Tested coordinates: 120000
Tested coordinates: 130000
Tested coordinates: 140000
Valid coordinates: 3680
Tested coordinates: 150000
Tested coordinates: 160000
Tested coordinates: 170000
Tested coordinates: 180000
Valid coordinates: 4600
Valid/Tested configurations: 4600/185434
Generated Search Space:
NULL
Clean Info:
Removed Factors: character(0)

Removed Inverse Factors: [1] "ACOPY_x" "ACOPY_y" "SCR"     "VEC1"    "VEC2"   

New Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
New Inverse Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K']
New Fixed Factors: {}
Full Model:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_x + ACOPY_y + U1_I + U_I + U_J + U_K + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2 + I(1 / (1 + T1_I)) + I(1 / (1 + T1_J)) + I(1 / (1 + T1_K)) + I(1 / (1 + T2_I)) + I(1 / (1 + T2_J)) + I(1 / (1 + T2_K)) + I(1 / (1 + U1_I)) + I(1 / (1 + U_I)) + I(1 / (1 + U_J)) + I(1 / (1 + U_K)) + I(1 / (1 + RT_I)) + I(1 / (1 + RT_J)) + I(1 / (1 + RT_K))
Fixed Factors: {}
Computing D-Optimal Design
Computing D-Optimal Design with 46 experiments
Design Formula:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_x + ACOPY_y + U1_I + U_I + U_J + U_K + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2 + I(1 / (1 + T1_I)) + I(1 / (1 + T1_J)) + I(1 / (1 + T1_K)) + I(1 / (1 + T2_I)) + I(1 / (1 + T2_J)) + I(1 / (1 + T2_K)) + I(1 / (1 + U1_I)) + I(1 / (1 + U_I)) + I(1 / (1 + U_J)) + I(1 / (1 + U_K)) + I(1 / (1 + RT_I)) + I(1 / (1 + RT_J)) + I(1 / (1 + RT_K))
Starting "optFederov" run
Using Search Space:
NULL
Data Dimensions: [1] 4600   18

     T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
27      3    0    1    6    6    5       1       0   28   0  29   3    0    0
34      0    1    3    4    6    6       0       1   29  29   0  28    0    2
51      6    6    2    6    0    5       0       1   28  26  28   0    2    0
151     1    2    0    1    1    1       1       1   17  25   0   3    0    0
165     0    0    0    1    3    2       1       0   26   7  21   0    0    1
173     3    6    6    2    0    0       0       1   27  13   0  22    1    0
244     2    6    3    0    0    1       1       1    0   0  21   6    0    0
454     6    1    6    0    2    6       0       0   27   0  11  23    0    0
524     5    1    0    5    0    2       1       0    0  29  26   0    1    1
638     4    5    4    5    0    0       1       1   29   5   2   0    0    2
646     1    2    2    6    5    1       1       0   25  26   8   0    1    0
671     1    3    0    0    0    5       0       1   20   5   0  28    0    1
922     5    5    0    3    5    2       0       1    0   2   0   0    1    0
936     0    0    0    6    1    0       0       0    8  29   1   0    0    0
956     1    0    5    0    0    4       0       0   23   0  24   5    0    2
1080    0    6    2    3    0    4       0       1    3   8   0   5    1    1
1199    6    5    0    5    3    0       1       0   13   1   0  21    1    1
1205    4    1    6    5    0    6       1       1    3  22  23   0    0    0
1385    4    1    2    6    6    1       1       0    0   8   0  17    0    0
1547    0    2    1    5    0    6       1       0   14   8   0  27    0    0
1776    4    0    0    5    5    1       0       1   29  27  13   0    0    0
1953    5    6    6    6    6    5       0       1    4   0   2   5    0    1
2003    2    2    2    1    3    3       0       0    3   0  29  29    0    2
2022    0    6    0    1    5    5       1       1    0   0   3   3    2    0
2084    2    2    0    0    3    6       1       1   14   6  17   0    0    2
2107    6    5    4    4    4    5       0       0    6   0  10   1    1    0
2119    0    6    5    0    5    6       1       1    4  12  28   0    0    0
2668    2    0    2    2    0    5       0       1   24  13   0  28    2    0
2759    0    2    6    6    3    0       1       0   18   1  29   0    2    0
2762    3    6    2    1    0    5       1       1   10  29   0   0    0    0
2820    0    1    4    0    0    6       0       0   28   0   0  23    1    0
3160    1    1    0    2    6    0       0       1   29   0  27  17    1    0
3410    2    0    2    2    6    0       1       0   10   4   0   0    2    0
3503    0    5    0    1    6    4       0       0    0   8   4   0    0    0
4109    5    1    2    6    0    6       0       0    7   0  10   2    0    0
4118    1    0    2    5    1    0       0       1    2   0   8  29    1    0
4122    0    2    6    0    2    0       0       1    8   0  15   3    0    0
4159    0    0    2    2    1    4       1       0   19   0   3  25    0    0
4187    0    1    5    2    6    0       0       0   22  27   6   0    0    1
4211    6    0    4    4    5    4       1       1    0   2   0   9    0    2
4320    6    6    2    0    6    0       1       0   12  18   0  22    0    0
4389    2    6    0    6    4    0       1       0   21  25   8   0    1    1
4402    1    4    3    1    3    6       0       0    0  20  13   0    0    1
4427    1    0    6    2    4    4       1       0   10  25  11   0    1    0
4483    6    3    2    0    5    3       0       0   12   8   8   0    2    0
4592    1    0    2    4    5    2       0       1   23   0   0   0    0    1
     RT_K SCR VEC1 VEC2
27      1   1    1    0
34      0   0    0    0
51      0   0    0    0
151     2   0    0    0
165     1   0    0    1
173     0   1    1    1
244     0   0    0    1
454     1   1    1    1
524     0   1    1    0
638     0   0    1    1
646     0   0    1    1
671     1   0    0    1
922     1   1    1    1
936     1   0    1    0
956     0   0    0    1
1080    0   1    0    0
1199    0   0    0    1
1205    0   0    0    1
1385    2   0    1    0
1547    1   1    0    1
1776    2   0    0    1
1953    1   1    1    0
2003    0   0    1    1
2022    0   0    1    1
2084    0   1    0    0
2107    1   0    0    0
2119    2   0    1    1
2668    0   1    1    1
2759    0   1    0    1
2762    1   0    0    0
2820    0   1    0    0
3160    0   0    0    0
3410    0   1    1    0
3503    0   0    0    0
4109    2   1    0    1
4118    1   0    0    0
4122    0   1    1    1
4159    0   1    1    0
4187    1   0    1    1
4211    0   0    1    1
4320    1   1    0    1
4389    0   0    1    0
4402    1   1    0    1
4427    0   1    0    1
4483    0   0    0    0
4592    1   1    1    0

D-Efficiency Approximation: [1] 0.386

Measuring design of size 46
Current Design Names: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Initial Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Length of requested configs: 1
Code stats:
        Number of loops: 	14
        Max loop nest depth: 	6
        Additions: 		297
        Multiplications: 	88
        Divisions: 		0
        Logical: 		0
        Reads: 			624
        Writes: 		135
        Comparisons:		14
        Gotos: 			0
        
 building the original code:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -DORIGINAL -o __orio_perftest_original.exe __orio_perftest1.c timer_cpu.o -lm
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest1.exe __orio_perftest1.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest1.exe  
Program Test Output: 
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.238182}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.230859}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211936}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211925}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211964}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.210746}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205324}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.20549}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205474}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205303}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205426}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205309}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205783}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205384}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.20531}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205601}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205291}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205483}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205388}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205351}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.209909}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205356}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205512}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205494}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205668}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.210454}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211928}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.207704}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205358}
{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205346}

out:
 ["{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.238182}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.230859}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211936}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211925}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211964}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.210746}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205324}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.20549}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205474}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205303}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205426}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205309}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205783}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205384}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.20531}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205601}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205291}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205483}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205388}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205351}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.209909}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205356}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205512}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205494}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205668}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.210454}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.211928}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.207704}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205358}", "{'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]' : 0.205346}"]
returning from 'run': {'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]': ([0.238182, 0.230859, 0.211936, 0.211925, 0.211964, 0.210746, 0.205324, 0.20549, 0.205474, 0.205303, 0.205426, 0.205309, 0.205783, 0.205384, 0.20531, 0.205601, 0.205291, 0.205483, 0.205388, 0.205351, 0.209909, 0.205356, 0.205512, 0.205494, 0.205668, 0.210454, 0.211928, 0.207704, 0.205358, 0.205346], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 0, 1, 6, 6, 5, 1, 0, 28, 0, 29, 3, 0, 0, 1, 1, 1, 0]': ([0.238182, 0.230859, 0.211936, 0.211925, 0.211964, 0.210746, 0.205324, 0.20549, 0.205474, 0.205303, 0.205426, 0.205309, 0.205783, 0.205384, 0.20531, 0.205601, 0.205291, 0.205483, 0.205388, 0.205351, 0.209909, 0.205356, 0.205512, 0.205494, 0.205668, 0.210454, 0.211928, 0.207704, 0.205358, 0.205346], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	141
        Max loop nest depth: 	5
        Additions: 		15764
        Multiplications: 	3906
        Divisions: 		0
        Logical: 		0
        Reads: 			22927
        Writes: 		2359
        Comparisons:		141
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest2.exe __orio_perftest2.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest2.exe  
Program Test Output: 
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.261186}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.263316}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.23058}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224347}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22426}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.225165}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22408}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224043}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224726}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224575}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224717}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224478}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224312}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224002}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224967}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.223969}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224483}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224492}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.225221}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224339}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224788}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224755}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224765}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22456}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224393}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22449}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224502}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224594}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224713}
{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224813}

out:
 ["{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.261186}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.263316}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.23058}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224347}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22426}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.225165}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22408}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224043}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224726}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224575}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224717}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224478}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224312}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224002}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224967}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.223969}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224483}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224492}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.225221}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224339}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224788}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224755}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224765}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22456}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224393}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.22449}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224502}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224594}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224713}", "{'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]' : 0.224813}"]
returning from 'run': {'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]': ([0.261186, 0.263316, 0.23058, 0.224347, 0.22426, 0.225165, 0.22408, 0.224043, 0.224726, 0.224575, 0.224717, 0.224478, 0.224312, 0.224002, 0.224967, 0.223969, 0.224483, 0.224492, 0.225221, 0.224339, 0.224788, 0.224755, 0.224765, 0.22456, 0.224393, 0.22449, 0.224502, 0.224594, 0.224713, 0.224813], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 1, 3, 4, 6, 6, 0, 1, 29, 29, 0, 28, 0, 2, 0, 0, 0, 0]': ([0.261186, 0.263316, 0.23058, 0.224347, 0.22426, 0.225165, 0.22408, 0.224043, 0.224726, 0.224575, 0.224717, 0.224478, 0.224312, 0.224002, 0.224967, 0.223969, 0.224483, 0.224492, 0.225221, 0.224339, 0.224788, 0.224755, 0.224765, 0.22456, 0.224393, 0.22449, 0.224502, 0.224594, 0.224713, 0.224813], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	83
        Max loop nest depth: 	6
        Additions: 		12840
        Multiplications: 	3720
        Divisions: 		0
        Logical: 		0
        Reads: 			19709
        Writes: 		2143
        Comparisons:		83
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest3.exe __orio_perftest3.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest3.exe  
Program Test Output: 
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26751}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269313}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268018}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267268}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267756}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267838}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268091}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.266677}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.266671}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268119}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267861}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267232}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267025}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269002}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269018}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26905}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268119}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269223}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26882}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268441}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268379}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268511}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267995}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267549}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268577}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26937}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268783}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267966}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.270274}
{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.271344}

out:
 ["{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26751}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269313}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268018}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267268}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267756}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267838}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268091}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.266677}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.266671}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268119}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267861}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267232}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267025}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269002}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269018}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26905}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268119}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.269223}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26882}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268441}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268379}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268511}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267995}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267549}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268577}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.26937}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.268783}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.267966}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.270274}", "{'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]' : 0.271344}"]
returning from 'run': {'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]': ([0.26751, 0.269313, 0.268018, 0.267268, 0.267756, 0.267838, 0.268091, 0.266677, 0.266671, 0.268119, 0.267861, 0.267232, 0.267025, 0.269002, 0.269018, 0.26905, 0.268119, 0.269223, 0.26882, 0.268441, 0.268379, 0.268511, 0.267995, 0.267549, 0.268577, 0.26937, 0.268783, 0.267966, 0.270274, 0.271344], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[6, 6, 2, 6, 0, 5, 0, 1, 28, 26, 28, 0, 2, 0, 0, 0, 0, 0]': ([0.26751, 0.269313, 0.268018, 0.267268, 0.267756, 0.267838, 0.268091, 0.266677, 0.266671, 0.268119, 0.267861, 0.267232, 0.267025, 0.269002, 0.269018, 0.26905, 0.268119, 0.269223, 0.26882, 0.268441, 0.268379, 0.268511, 0.267995, 0.267549, 0.268577, 0.26937, 0.268783, 0.267966, 0.270274, 0.271344], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	97
        Max loop nest depth: 	6
        Additions: 		8145
        Multiplications: 	1782
        Divisions: 		0
        Logical: 		0
        Reads: 			11833
        Writes: 		1212
        Comparisons:		97
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest4.exe __orio_perftest4.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest4.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest4.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest4.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest4.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	24
        Max loop nest depth: 	4
        Additions: 		1111
        Multiplications: 	306
        Divisions: 		0
        Logical: 		0
        Reads: 			1893
        Writes: 		253
        Comparisons:		24
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest5.exe __orio_perftest5.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest5.exe  
Program Test Output: 
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.146445}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.146144}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.146099}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.145817}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.126672}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123286}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123958}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123642}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.12347}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123423}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123375}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123325}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123389}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123324}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123611}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123857}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123816}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123331}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.1233}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123366}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123421}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.12329}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123288}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.12345}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.124199}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123541}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123314}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123406}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123373}
{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123368}

out:
 ["{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.146445}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.146144}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.146099}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.145817}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.126672}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123286}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123958}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123642}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.12347}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123423}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123375}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123325}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123389}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123324}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123611}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123857}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123816}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123331}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.1233}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123366}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123421}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.12329}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123288}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.12345}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.124199}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123541}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123314}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123406}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123373}", "{'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]' : 0.123368}"]
returning from 'run': {'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]': ([0.146445, 0.146144, 0.146099, 0.145817, 0.126672, 0.123286, 0.123958, 0.123642, 0.12347, 0.123423, 0.123375, 0.123325, 0.123389, 0.123324, 0.123611, 0.123857, 0.123816, 0.123331, 0.1233, 0.123366, 0.123421, 0.12329, 0.123288, 0.12345, 0.124199, 0.123541, 0.123314, 0.123406, 0.123373, 0.123368], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 0, 0, 1, 3, 2, 1, 0, 26, 7, 21, 0, 0, 1, 1, 0, 0, 1]': ([0.146445, 0.146144, 0.146099, 0.145817, 0.126672, 0.123286, 0.123958, 0.123642, 0.12347, 0.123423, 0.123375, 0.123325, 0.123389, 0.123324, 0.123611, 0.123857, 0.123816, 0.123331, 0.1233, 0.123366, 0.123421, 0.12329, 0.123288, 0.12345, 0.124199, 0.123541, 0.123314, 0.123406, 0.123373, 0.123368], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	80
        Max loop nest depth: 	5
        Additions: 		4132
        Multiplications: 	1150
        Divisions: 		0
        Logical: 		0
        Reads: 			8196
        Writes: 		1682
        Comparisons:		80
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest6.exe __orio_perftest6.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest6.exe  
Program Test Output: 
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116127}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116153}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116121}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116095}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.107598}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101826}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101868}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.10228}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101795}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102079}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102092}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101822}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101909}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101805}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102012}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101955}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101907}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102044}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101822}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101999}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101966}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102289}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102323}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101855}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101888}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101788}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101947}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102148}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101886}
{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101984}

out:
 ["{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116127}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116153}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116121}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.116095}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.107598}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101826}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101868}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.10228}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101795}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102079}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102092}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101822}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101909}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101805}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102012}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101955}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101907}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102044}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101822}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101999}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101966}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102289}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102323}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101855}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101888}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101788}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101947}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.102148}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101886}", "{'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]' : 0.101984}"]
returning from 'run': {'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]': ([0.116127, 0.116153, 0.116121, 0.116095, 0.107598, 0.101826, 0.101868, 0.10228, 0.101795, 0.102079, 0.102092, 0.101822, 0.101909, 0.101805, 0.102012, 0.101955, 0.101907, 0.102044, 0.101822, 0.101999, 0.101966, 0.102289, 0.102323, 0.101855, 0.101888, 0.101788, 0.101947, 0.102148, 0.101886, 0.101984], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 6, 6, 2, 0, 0, 0, 1, 27, 13, 0, 22, 1, 0, 0, 1, 1, 1]': ([0.116127, 0.116153, 0.116121, 0.116095, 0.107598, 0.101826, 0.101868, 0.10228, 0.101795, 0.102079, 0.102092, 0.101822, 0.101909, 0.101805, 0.102012, 0.101955, 0.101907, 0.102044, 0.101822, 0.101999, 0.101966, 0.102289, 0.102323, 0.101855, 0.101888, 0.101788, 0.101947, 0.102148, 0.101886, 0.101984], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 64 must be greater than the stride value 64; tile index = kkk
Code stats:
        Number of loops: 	12
        Max loop nest depth: 	4
        Additions: 		216
        Multiplications: 	62
        Divisions: 		0
        Logical: 		0
        Reads: 			464
        Writes: 		66
        Comparisons:		12
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest7.exe __orio_perftest7.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest7.exe  
Program Test Output: 
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.275035}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.275051}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.247833}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230952}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231088}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230645}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230924}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230864}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231078}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230912}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230796}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230945}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.23086}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231103}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231008}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231109}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231261}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230991}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.238154}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231168}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230993}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231176}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231361}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231415}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231396}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.23094}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230855}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231067}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231332}
{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231342}

out:
 ["{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.275035}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.275051}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.247833}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230952}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231088}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230645}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230924}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230864}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231078}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230912}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230796}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230945}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.23086}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231103}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231008}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231109}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231261}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230991}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.238154}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231168}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230993}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231176}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231361}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231415}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231396}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.23094}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.230855}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231067}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231332}", "{'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]' : 0.231342}"]
returning from 'run': {'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]': ([0.275035, 0.275051, 0.247833, 0.230952, 0.231088, 0.230645, 0.230924, 0.230864, 0.231078, 0.230912, 0.230796, 0.230945, 0.23086, 0.231103, 0.231008, 0.231109, 0.231261, 0.230991, 0.238154, 0.231168, 0.230993, 0.231176, 0.231361, 0.231415, 0.231396, 0.23094, 0.230855, 0.231067, 0.231332, 0.231342], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 6, 3, 0, 0, 1, 1, 1, 0, 0, 21, 6, 0, 0, 0, 0, 0, 1]': ([0.275035, 0.275051, 0.247833, 0.230952, 0.231088, 0.230645, 0.230924, 0.230864, 0.231078, 0.230912, 0.230796, 0.230945, 0.23086, 0.231103, 0.231008, 0.231109, 0.231261, 0.230991, 0.238154, 0.231168, 0.230993, 0.231176, 0.231361, 0.231415, 0.231396, 0.23094, 0.230855, 0.231067, 0.231332, 0.231342], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	13
        Max loop nest depth: 	5
        Additions: 		289
        Multiplications: 	92
        Divisions: 		0
        Logical: 		0
        Reads: 			709
        Writes: 		180
        Comparisons:		13
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest8.exe __orio_perftest8.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest8.exe  
Program Test Output: 
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.175227}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.175114}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.173976}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.149142}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147396}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147293}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147189}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147643}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147593}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147712}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147568}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147556}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147355}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147398}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147504}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147579}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.14747}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147337}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147418}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147499}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147696}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.14786}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147549}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147415}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147313}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147383}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147393}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147356}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147452}
{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.148048}

out:
 ["{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.175227}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.175114}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.173976}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.149142}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147396}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147293}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147189}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147643}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147593}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147712}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147568}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147556}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147355}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147398}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147504}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147579}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.14747}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147337}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147418}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147499}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147696}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.14786}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147549}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147415}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147313}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147383}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147393}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147356}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.147452}", "{'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]' : 0.148048}"]
returning from 'run': {'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]': ([0.175227, 0.175114, 0.173976, 0.149142, 0.147396, 0.147293, 0.147189, 0.147643, 0.147593, 0.147712, 0.147568, 0.147556, 0.147355, 0.147398, 0.147504, 0.147579, 0.14747, 0.147337, 0.147418, 0.147499, 0.147696, 0.14786, 0.147549, 0.147415, 0.147313, 0.147383, 0.147393, 0.147356, 0.147452, 0.148048], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[6, 1, 6, 0, 2, 6, 0, 0, 27, 0, 11, 23, 0, 0, 1, 1, 1, 1]': ([0.175227, 0.175114, 0.173976, 0.149142, 0.147396, 0.147293, 0.147189, 0.147643, 0.147593, 0.147712, 0.147568, 0.147556, 0.147355, 0.147398, 0.147504, 0.147579, 0.14747, 0.147337, 0.147418, 0.147499, 0.147696, 0.14786, 0.147549, 0.147415, 0.147313, 0.147383, 0.147393, 0.147356, 0.147452, 0.148048], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	50
        Max loop nest depth: 	5
        Additions: 		1604
        Multiplications: 	702
        Divisions: 		0
        Logical: 		0
        Reads: 			3323
        Writes: 		617
        Comparisons:		50
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest9.exe __orio_perftest9.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest9.exe  
Program Test Output: 
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.12437}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.124375}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.124345}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.122771}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.105956}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104901}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104649}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104673}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.1048}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104566}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104619}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104583}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104561}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.105672}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104863}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104897}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104668}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104578}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104559}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104853}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104668}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104602}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104811}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104526}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104937}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.10505}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104661}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104798}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104732}
{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104663}

out:
 ["{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.12437}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.124375}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.124345}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.122771}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.105956}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104901}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104649}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104673}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.1048}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104566}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104619}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104583}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104561}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.105672}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104863}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104897}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104668}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104578}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104559}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104853}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104668}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104602}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104811}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104526}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104937}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.10505}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104661}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104798}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104732}", "{'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]' : 0.104663}"]
returning from 'run': {'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]': ([0.12437, 0.124375, 0.124345, 0.122771, 0.105956, 0.104901, 0.104649, 0.104673, 0.1048, 0.104566, 0.104619, 0.104583, 0.104561, 0.105672, 0.104863, 0.104897, 0.104668, 0.104578, 0.104559, 0.104853, 0.104668, 0.104602, 0.104811, 0.104526, 0.104937, 0.10505, 0.104661, 0.104798, 0.104732, 0.104663], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[5, 1, 0, 5, 0, 2, 1, 0, 0, 29, 26, 0, 1, 1, 0, 1, 1, 0]': ([0.12437, 0.124375, 0.124345, 0.122771, 0.105956, 0.104901, 0.104649, 0.104673, 0.1048, 0.104566, 0.104619, 0.104583, 0.104561, 0.105672, 0.104863, 0.104897, 0.104668, 0.104578, 0.104559, 0.104853, 0.104668, 0.104602, 0.104811, 0.104526, 0.104937, 0.10505, 0.104661, 0.104798, 0.104732, 0.104663], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	35
        Max loop nest depth: 	5
        Additions: 		1792
        Multiplications: 	462
        Divisions: 		0
        Logical: 		0
        Reads: 			2980
        Writes: 		367
        Comparisons:		35
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest10.exe __orio_perftest10.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest10.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest10.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest10.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest10.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	109
        Max loop nest depth: 	6
        Additions: 		3486
        Multiplications: 	792
        Divisions: 		0
        Logical: 		0
        Reads: 			5630
        Writes: 		792
        Comparisons:		109
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest11.exe __orio_perftest11.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest11.exe  
Program Test Output: 
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107716}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107673}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107571}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107791}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.108009}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107822}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107552}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107673}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.10772}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107669}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107563}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107683}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107865}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107771}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107845}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107651}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107598}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107652}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107652}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107701}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107602}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107842}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107518}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107787}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107854}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107637}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107431}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107729}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.10759}
{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107591}

out:
 ["{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107716}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107673}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107571}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107791}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.108009}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107822}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107552}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107673}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.10772}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107669}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107563}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107683}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107865}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107771}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107845}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107651}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107598}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107652}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107652}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107701}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107602}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107842}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107518}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107787}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107854}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107637}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107431}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107729}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.10759}", "{'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]' : 0.107591}"]
returning from 'run': {'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]': ([0.107716, 0.107673, 0.107571, 0.107791, 0.108009, 0.107822, 0.107552, 0.107673, 0.10772, 0.107669, 0.107563, 0.107683, 0.107865, 0.107771, 0.107845, 0.107651, 0.107598, 0.107652, 0.107652, 0.107701, 0.107602, 0.107842, 0.107518, 0.107787, 0.107854, 0.107637, 0.107431, 0.107729, 0.10759, 0.107591], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 2, 2, 6, 5, 1, 1, 0, 25, 26, 8, 0, 1, 0, 0, 0, 1, 1]': ([0.107716, 0.107673, 0.107571, 0.107791, 0.108009, 0.107822, 0.107552, 0.107673, 0.10772, 0.107669, 0.107563, 0.107683, 0.107865, 0.107771, 0.107845, 0.107651, 0.107598, 0.107652, 0.107652, 0.107701, 0.107602, 0.107842, 0.107518, 0.107787, 0.107854, 0.107637, 0.107431, 0.107729, 0.10759, 0.107591], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	29
        Max loop nest depth: 	4
        Additions: 		946
        Multiplications: 	238
        Divisions: 		0
        Logical: 		0
        Reads: 			1637
        Writes: 		226
        Comparisons:		29
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest12.exe __orio_perftest12.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest12.exe  
Program Test Output: 
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.179202}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.17915}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.179164}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.159907}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151441}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151997}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151509}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151503}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151657}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15155}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151575}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151433}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151624}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15172}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151583}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151561}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151539}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151583}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15175}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151641}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151713}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151736}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151675}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151479}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151547}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151378}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15162}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151742}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151457}
{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151664}

out:
 ["{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.179202}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.17915}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.179164}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.159907}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151441}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151997}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151509}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151503}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151657}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15155}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151575}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151433}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151624}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15172}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151583}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151561}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151539}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151583}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15175}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151641}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151713}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151736}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151675}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151479}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151547}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151378}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.15162}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151742}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151457}", "{'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]' : 0.151664}"]
returning from 'run': {'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]': ([0.179202, 0.17915, 0.179164, 0.159907, 0.151441, 0.151997, 0.151509, 0.151503, 0.151657, 0.15155, 0.151575, 0.151433, 0.151624, 0.15172, 0.151583, 0.151561, 0.151539, 0.151583, 0.15175, 0.151641, 0.151713, 0.151736, 0.151675, 0.151479, 0.151547, 0.151378, 0.15162, 0.151742, 0.151457, 0.151664], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 3, 0, 0, 0, 5, 0, 1, 20, 5, 0, 28, 0, 1, 1, 0, 0, 1]': ([0.179202, 0.17915, 0.179164, 0.159907, 0.151441, 0.151997, 0.151509, 0.151503, 0.151657, 0.15155, 0.151575, 0.151433, 0.151624, 0.15172, 0.151583, 0.151561, 0.151539, 0.151583, 0.15175, 0.151641, 0.151713, 0.151736, 0.151675, 0.151479, 0.151547, 0.151378, 0.15162, 0.151742, 0.151457, 0.151664], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 256 must be greater than the stride value 256; tile index = iii
Code stats:
        Number of loops: 	30
        Max loop nest depth: 	5
        Additions: 		595
        Multiplications: 	216
        Divisions: 		0
        Logical: 		0
        Reads: 			1296
        Writes: 		265
        Comparisons:		30
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest13.exe __orio_perftest13.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest13.exe  
Program Test Output: 
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.11121}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.111077}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.111016}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.111034}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.106761}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979209}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097888}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0981679}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098063}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098171}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0980661}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979631}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098032}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0978861}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0978279}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979891}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979679}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097918}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098146}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0980639}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098269}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979838}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097892}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0978479}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979178}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098088}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.09795}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097923}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097795}
{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0980091}

out:
 ["{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.11121}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.111077}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.111016}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.111034}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.106761}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979209}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097888}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0981679}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098063}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098171}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0980661}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979631}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098032}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0978861}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0978279}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979891}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979679}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097918}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098146}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0980639}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098269}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979838}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097892}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0978479}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0979178}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.098088}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.09795}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097923}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.097795}", "{'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]' : 0.0980091}"]
returning from 'run': {'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]': ([0.11121, 0.111077, 0.111016, 0.111034, 0.106761, 0.0979209, 0.097888, 0.0981679, 0.098063, 0.098171, 0.0980661, 0.0979631, 0.098032, 0.0978861, 0.0978279, 0.0979891, 0.0979679, 0.097918, 0.098146, 0.0980639, 0.098269, 0.0979838, 0.097892, 0.0978479, 0.0979178, 0.098088, 0.09795, 0.097923, 0.097795, 0.0980091], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[5, 5, 0, 3, 5, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1, 1]': ([0.11121, 0.111077, 0.111016, 0.111034, 0.106761, 0.0979209, 0.097888, 0.0981679, 0.098063, 0.098171, 0.0980661, 0.0979631, 0.098032, 0.0978861, 0.0978279, 0.0979891, 0.0979679, 0.097918, 0.098146, 0.0980639, 0.098269, 0.0979838, 0.097892, 0.0978479, 0.0979178, 0.098088, 0.09795, 0.097923, 0.097795, 0.0980091], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	13
        Max loop nest depth: 	4
        Additions: 		2222
        Multiplications: 	682
        Divisions: 		0
        Logical: 		0
        Reads: 			3589
        Writes: 		411
        Comparisons:		13
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest14.exe __orio_perftest14.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest14.exe  
Program Test Output: 
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154519}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153991}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154023}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154123}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154199}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154263}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153699}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154041}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154021}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154058}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154135}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154332}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153912}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154325}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153924}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153901}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153798}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153952}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154579}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.15469}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154926}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153817}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154161}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153883}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154023}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154061}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153834}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.15391}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153699}
{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153644}

out:
 ["{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154519}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153991}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154023}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154123}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154199}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154263}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153699}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154041}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154021}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154058}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154135}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154332}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153912}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154325}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153924}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153901}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153798}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153952}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154579}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.15469}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154926}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153817}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154161}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153883}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154023}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.154061}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153834}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.15391}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153699}", "{'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]' : 0.153644}"]
returning from 'run': {'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]': ([0.154519, 0.153991, 0.154023, 0.154123, 0.154199, 0.154263, 0.153699, 0.154041, 0.154021, 0.154058, 0.154135, 0.154332, 0.153912, 0.154325, 0.153924, 0.153901, 0.153798, 0.153952, 0.154579, 0.15469, 0.154926, 0.153817, 0.154161, 0.153883, 0.154023, 0.154061, 0.153834, 0.15391, 0.153699, 0.153644], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 0, 0, 6, 1, 0, 0, 0, 8, 29, 1, 0, 0, 0, 1, 0, 1, 0]': ([0.154519, 0.153991, 0.154023, 0.154123, 0.154199, 0.154263, 0.153699, 0.154041, 0.154021, 0.154058, 0.154135, 0.154332, 0.153912, 0.154325, 0.153924, 0.153901, 0.153798, 0.153952, 0.154579, 0.15469, 0.154926, 0.153817, 0.154161, 0.153883, 0.154023, 0.154061, 0.153834, 0.15391, 0.153699, 0.153644], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	9
        Max loop nest depth: 	5
        Additions: 		213
        Multiplications: 	78
        Divisions: 		0
        Logical: 		0
        Reads: 			509
        Writes: 		87
        Comparisons:		9
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest15.exe __orio_perftest15.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest15.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest15.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest15.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest15.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	65
        Max loop nest depth: 	5
        Additions: 		1685
        Multiplications: 	576
        Divisions: 		0
        Logical: 		0
        Reads: 			3421
        Writes: 		664
        Comparisons:		65
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest16.exe __orio_perftest16.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest16.exe  
Program Test Output: 
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.111313}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.11117}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.111088}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.110728}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101216}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10183}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099788}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099633}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099431}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099874}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101834}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101915}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101824}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101894}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101848}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101881}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101851}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10195}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101927}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.102202}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101909}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101952}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101913}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101954}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10191}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10199}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101922}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101916}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101806}
{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101912}

out:
 ["{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.111313}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.11117}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.111088}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.110728}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101216}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10183}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099788}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099633}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099431}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.099874}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101834}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101915}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101824}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101894}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101848}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101881}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101851}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10195}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101927}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.102202}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101909}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101952}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101913}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101954}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10191}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.10199}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101922}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101916}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101806}", "{'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]' : 0.101912}"]
returning from 'run': {'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]': ([0.111313, 0.11117, 0.111088, 0.110728, 0.101216, 0.10183, 0.099788, 0.099633, 0.099431, 0.099874, 0.101834, 0.101915, 0.101824, 0.101894, 0.101848, 0.101881, 0.101851, 0.10195, 0.101927, 0.102202, 0.101909, 0.101952, 0.101913, 0.101954, 0.10191, 0.10199, 0.101922, 0.101916, 0.101806, 0.101912], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 6, 2, 3, 0, 4, 0, 1, 3, 8, 0, 5, 1, 1, 0, 1, 0, 0]': ([0.111313, 0.11117, 0.111088, 0.110728, 0.101216, 0.10183, 0.099788, 0.099633, 0.099431, 0.099874, 0.101834, 0.101915, 0.101824, 0.101894, 0.101848, 0.101881, 0.101851, 0.10195, 0.101927, 0.102202, 0.101909, 0.101952, 0.101913, 0.101954, 0.10191, 0.10199, 0.101922, 0.101916, 0.101806, 0.101912], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 256 must be greater than the stride value 256; tile index = jjj
Code stats:
        Number of loops: 	25
        Max loop nest depth: 	5
        Additions: 		2285
        Multiplications: 	682
        Divisions: 		0
        Logical: 		0
        Reads: 			3747
        Writes: 		429
        Comparisons:		25
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest17.exe __orio_perftest17.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest17.exe  
Program Test Output: 
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.133165}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.133326}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.129168}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119298}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119796}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120239}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120039}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120184}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120145}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.118297}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116419}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116638}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.117338}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.11674}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116447}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116561}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116599}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.11677}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119775}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119825}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119857}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119748}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116345}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.117075}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116278}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116747}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116476}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116653}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116665}
{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116967}

out:
 ["{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.133165}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.133326}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.129168}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119298}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119796}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120239}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120039}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120184}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.120145}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.118297}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116419}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116638}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.117338}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.11674}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116447}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116561}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116599}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.11677}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119775}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119825}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119857}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.119748}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116345}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.117075}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116278}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116747}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116476}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116653}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116665}", "{'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]' : 0.116967}"]
returning from 'run': {'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]': ([0.133165, 0.133326, 0.129168, 0.119298, 0.119796, 0.120239, 0.120039, 0.120184, 0.120145, 0.118297, 0.116419, 0.116638, 0.117338, 0.11674, 0.116447, 0.116561, 0.116599, 0.11677, 0.119775, 0.119825, 0.119857, 0.119748, 0.116345, 0.117075, 0.116278, 0.116747, 0.116476, 0.116653, 0.116665, 0.116967], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[6, 5, 0, 5, 3, 0, 1, 0, 13, 1, 0, 21, 1, 1, 0, 0, 0, 1]': ([0.133165, 0.133326, 0.129168, 0.119298, 0.119796, 0.120239, 0.120039, 0.120184, 0.120145, 0.118297, 0.116419, 0.116638, 0.117338, 0.11674, 0.116447, 0.116561, 0.116599, 0.11677, 0.119775, 0.119825, 0.119857, 0.119748, 0.116345, 0.117075, 0.116278, 0.116747, 0.116476, 0.116653, 0.116665, 0.116967], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	134
        Max loop nest depth: 	6
        Additions: 		5439
        Multiplications: 	1248
        Divisions: 		0
        Logical: 		0
        Reads: 			8480
        Writes: 		1067
        Comparisons:		134
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest18.exe __orio_perftest18.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest18.exe  
Program Test Output: 
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225701}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226087}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225881}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.22603}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226375}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225641}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226122}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226439}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225798}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225759}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225419}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225957}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226574}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226328}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226045}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226118}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225916}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226259}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226115}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225872}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.233251}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226641}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226047}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226415}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226529}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226011}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226306}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226501}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225894}
{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225784}

out:
 ["{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225701}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226087}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225881}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.22603}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226375}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225641}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226122}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226439}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225798}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225759}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225419}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225957}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226574}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226328}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226045}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226118}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225916}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226259}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226115}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225872}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.233251}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226641}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226047}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226415}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226529}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226011}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226306}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.226501}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225894}", "{'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]' : 0.225784}"]
returning from 'run': {'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]': ([0.225701, 0.226087, 0.225881, 0.22603, 0.226375, 0.225641, 0.226122, 0.226439, 0.225798, 0.225759, 0.225419, 0.225957, 0.226574, 0.226328, 0.226045, 0.226118, 0.225916, 0.226259, 0.226115, 0.225872, 0.233251, 0.226641, 0.226047, 0.226415, 0.226529, 0.226011, 0.226306, 0.226501, 0.225894, 0.225784], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[4, 1, 6, 5, 0, 6, 1, 1, 3, 22, 23, 0, 0, 0, 0, 0, 0, 1]': ([0.225701, 0.226087, 0.225881, 0.22603, 0.226375, 0.225641, 0.226122, 0.226439, 0.225798, 0.225759, 0.225419, 0.225957, 0.226574, 0.226328, 0.226045, 0.226118, 0.225916, 0.226259, 0.226115, 0.225872, 0.233251, 0.226641, 0.226047, 0.226415, 0.226529, 0.226011, 0.226306, 0.226501, 0.225894, 0.225784], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	47
        Max loop nest depth: 	6
        Additions: 		3595
        Multiplications: 	1040
        Divisions: 		0
        Logical: 		0
        Reads: 			5645
        Writes: 		636
        Comparisons:		47
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest19.exe __orio_perftest19.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest19.exe  
Program Test Output: 
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.191903}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.186971}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172008}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172163}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172055}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172063}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.1721}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172034}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168968}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168035}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.171981}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172037}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.167334}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.17198}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168661}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168525}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172016}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172036}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.16975}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.167111}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166483}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166529}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166333}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166639}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166819}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166476}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166494}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.16669}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166988}
{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166478}

out:
 ["{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.191903}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.186971}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172008}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172163}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172055}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172063}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.1721}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172034}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168968}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168035}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.171981}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172037}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.167334}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.17198}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168661}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.168525}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172016}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.172036}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.16975}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.167111}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166483}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166529}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166333}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166639}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166819}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166476}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166494}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.16669}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166988}", "{'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]' : 0.166478}"]
returning from 'run': {'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]': ([0.191903, 0.186971, 0.172008, 0.172163, 0.172055, 0.172063, 0.1721, 0.172034, 0.168968, 0.168035, 0.171981, 0.172037, 0.167334, 0.17198, 0.168661, 0.168525, 0.172016, 0.172036, 0.16975, 0.167111, 0.166483, 0.166529, 0.166333, 0.166639, 0.166819, 0.166476, 0.166494, 0.16669, 0.166988, 0.166478], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[4, 1, 2, 6, 6, 1, 1, 0, 0, 8, 0, 17, 0, 0, 2, 0, 1, 0]': ([0.191903, 0.186971, 0.172008, 0.172163, 0.172055, 0.172063, 0.1721, 0.172034, 0.168968, 0.168035, 0.171981, 0.172037, 0.167334, 0.17198, 0.168661, 0.168525, 0.172016, 0.172036, 0.16975, 0.167111, 0.166483, 0.166529, 0.166333, 0.166639, 0.166819, 0.166476, 0.166494, 0.16669, 0.166988, 0.166478], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	45
        Max loop nest depth: 	5
        Additions: 		2257
        Multiplications: 	760
        Divisions: 		0
        Logical: 		0
        Reads: 			5069
        Writes: 		1173
        Comparisons:		45
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest20.exe __orio_perftest20.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest20.exe  
Program Test Output: 
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120831}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120869}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120829}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120957}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120754}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120855}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120576}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120991}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120603}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120931}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120653}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120915}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.121165}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120651}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.12061}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120776}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120665}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120721}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120777}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120723}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.121163}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120839}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120615}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120682}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120903}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120921}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120827}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120758}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120642}
{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120909}

out:
 ["{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120831}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120869}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120829}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120957}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120754}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120855}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120576}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120991}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120603}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120931}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120653}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120915}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.121165}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120651}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.12061}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120776}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120665}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120721}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120777}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120723}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.121163}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120839}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120615}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120682}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120903}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120921}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120827}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120758}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120642}", "{'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]' : 0.120909}"]
returning from 'run': {'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]': ([0.120831, 0.120869, 0.120829, 0.120957, 0.120754, 0.120855, 0.120576, 0.120991, 0.120603, 0.120931, 0.120653, 0.120915, 0.121165, 0.120651, 0.12061, 0.120776, 0.120665, 0.120721, 0.120777, 0.120723, 0.121163, 0.120839, 0.120615, 0.120682, 0.120903, 0.120921, 0.120827, 0.120758, 0.120642, 0.120909], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 2, 1, 5, 0, 6, 1, 0, 14, 8, 0, 27, 0, 0, 1, 1, 0, 1]': ([0.120831, 0.120869, 0.120829, 0.120957, 0.120754, 0.120855, 0.120576, 0.120991, 0.120603, 0.120931, 0.120653, 0.120915, 0.121165, 0.120651, 0.12061, 0.120776, 0.120665, 0.120721, 0.120777, 0.120723, 0.121163, 0.120839, 0.120615, 0.120682, 0.120903, 0.120921, 0.120827, 0.120758, 0.120642, 0.120909], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	74
        Max loop nest depth: 	5
        Additions: 		11340
        Multiplications: 	2726
        Divisions: 		0
        Logical: 		0
        Reads: 			16430
        Writes: 		1637
        Comparisons:		74
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest21.exe __orio_perftest21.c timer_cpu.o -lm
orio.main.tuner.ptest_driver:  failed to compile the testing code: "gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest21.exe __orio_perftest21.c timer_cpu.o -lm"
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 486, in run
    self.__build(perf_params=perf_params,coord=coord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 285, in __build
    err('orio.main.tuner.ptest_driver:  failed to compile the testing code: "%s"' % cmd)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  the executable of the test code does not exist
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 308, in __execute
    err('orio.main.tuner.ptest_driver:  the executable of the test code does not exist')

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

 running test:
	 ./__orio_perftest21.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest21.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest21.exe  ' returned non-zero exit status 127
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest21.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	15
        Max loop nest depth: 	6
        Additions: 		156
        Multiplications: 	40
        Divisions: 		0
        Logical: 		0
        Reads: 			352
        Writes: 		80
        Comparisons:		15
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest22.exe __orio_perftest22.c timer_cpu.o -lm
orio.main.tuner.ptest_driver:  failed to compile the testing code: "gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest22.exe __orio_perftest22.c timer_cpu.o -lm"
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 486, in run
    self.__build(perf_params=perf_params,coord=coord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 285, in __build
    err('orio.main.tuner.ptest_driver:  failed to compile the testing code: "%s"' % cmd)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  the executable of the test code does not exist
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 308, in __execute
    err('orio.main.tuner.ptest_driver:  the executable of the test code does not exist')

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

 running test:
	 ./__orio_perftest22.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest22.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest22.exe  ' returned non-zero exit status 127
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest22.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	14
        Max loop nest depth: 	6
        Additions: 		459
        Multiplications: 	188
        Divisions: 		0
        Logical: 		0
        Reads: 			1070
        Writes: 		138
        Comparisons:		14
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest23.exe __orio_perftest23.c timer_cpu.o -lm
orio.main.tuner.ptest_driver:  failed to compile the testing code: "gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest23.exe __orio_perftest23.c timer_cpu.o -lm"
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 486, in run
    self.__build(perf_params=perf_params,coord=coord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 285, in __build
    err('orio.main.tuner.ptest_driver:  failed to compile the testing code: "%s"' % cmd)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  the executable of the test code does not exist
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 308, in __execute
    err('orio.main.tuner.ptest_driver:  the executable of the test code does not exist')

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

 running test:
	 ./__orio_perftest23.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest23.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest23.exe  ' returned non-zero exit status 127
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest23.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 131, in search
    best_coord,best_perf,search_time,runs,speedup = self.searchBestCoord(startCoord)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 649, in searchBestCoord
    best_point, used_points = self.dopt_anova(initial_factors, initial_inverse_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 572, in dopt_anova
    i)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 521, in dopt_anova_step
    design                 = self.measure_design(design, response, fixed_factors)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/doptanova/doptanova.py", line 414, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/search/search.py", line 344, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/polaris/rochabrp/code/orio_experiments/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
