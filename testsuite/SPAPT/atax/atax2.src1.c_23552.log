
====== START ORIO ======

----- begin reading the source file: atax2.src1.c -----
----- finished reading the source file -----

----- begin parsing annotations -----
----- finished parsing annotations -----

----- begin optimizations -----
Search_Space         = 8.234e+13
Number_of_Parameters = 18
Numeric_Parameters   = 13
Binary_Parameters    = 05
['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
[[1, 16, 32, 64, 128, 256, 512], [1, 16, 32, 64, 128, 256, 512], [1, 16, 32, 64, 128, 256, 512], [1, 64, 128, 256, 512, 1024, 2048], [1, 64, 128, 256, 512, 1024, 2048], [1, 64, 128, 256, 512, 1024, 2048], [False, True], [False, True], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [1, 8, 32], [1, 8, 32], [1, 8, 32], [False, True], [False, True], [False, True]]

----- begin empirical tuning for problem size -----
 N = 10000
Parameters: {'ACOPY_x': [0, 2], 'ACOPY_y': [0, 2], 'RT_K': [0, 3], 'T1_I': [0, 7], 'T1_J': [0, 7], 'T1_K': [0, 7], 'U_K': [0, 30], 'U_J': [0, 30], 'U_I': [0, 30], 'U1_I': [0, 30], 'T2_K': [0, 7], 'T2_J': [0, 7], 'T2_I': [0, 7], 'VEC2': [0, 2], 'VEC1': [0, 2], 'RT_I': [0, 3], 'SCR': [0, 2], 'RT_J': [0, 3]}
Parameter Range Values: {'ACOPY_x': [False, True], 'ACOPY_y': [False, True], 'RT_K': [1, 8, 32], 'T1_I': [1, 16, 32, 64, 128, 256, 512], 'T1_J': [1, 16, 32, 64, 128, 256, 512], 'T1_K': [1, 16, 32, 64, 128, 256, 512], 'U_K': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_J': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U1_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'T2_K': [1, 64, 128, 256, 512, 1024, 2048], 'T2_J': [1, 64, 128, 256, 512, 1024, 2048], 'T2_I': [1, 64, 128, 256, 512, 1024, 2048], 'VEC2': [False, True], 'VEC1': [False, True], 'RT_I': [1, 8, 32], 'SCR': [False, True], 'RT_J': [1, 8, 32]}

----- begin random search -----
Initial Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Initial Inverse Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K']
Building seed search space (does not spend evaluations)
Using pre-generated space for this size
Starting DOPT-anova
Step 0
Full Model:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_x + ACOPY_y + U1_I + U_I + U_J + U_K + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2 + I(1 / (1 + T1_I)) + I(1 / (1 + T1_J)) + I(1 / (1 + T1_K)) + I(1 / (1 + T2_I)) + I(1 / (1 + T2_J)) + I(1 / (1 + T2_K)) + I(1 / (1 + U1_I)) + I(1 / (1 + U_I)) + I(1 / (1 + U_J)) + I(1 / (1 + U_K)) + I(1 / (1 + RT_I)) + I(1 / (1 + RT_J)) + I(1 / (1 + RT_K))
Fixed Factors: {}
Full data does not fit on budget
Computing D-Optimal Design
Updating Constraints
Parameter Range Values: {'ACOPY_x': [False, True], 'ACOPY_y': [False, True], 'RT_K': [1, 8, 32], 'T1_I': [1, 16, 32, 64, 128, 256, 512], 'T1_J': [1, 16, 32, 64, 128, 256, 512], 'T1_K': [1, 16, 32, 64, 128, 256, 512], 'U_K': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_J': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U1_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'T2_K': [1, 64, 128, 256, 512, 1024, 2048], 'T2_J': [1, 64, 128, 256, 512, 1024, 2048], 'T2_I': [1, 64, 128, 256, 512, 1024, 2048], 'VEC2': [False, True], 'VEC1': [False, True], 'RT_I': [1, 8, 32], 'SCR': [False, True], 'RT_J': [1, 8, 32]}
Variable Ranges: {'ACOPY_x': [False, True], 'ACOPY_y': [False, True], 'RT_K': [1, 8, 32], 'T1_I': [1, 16, 32, 64, 128, 256, 512], 'T1_J': [1, 16, 32, 64, 128, 256, 512], 'T1_K': [1, 16, 32, 64, 128, 256, 512], 'U_K': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_J': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U1_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'T2_K': [1, 64, 128, 256, 512, 1024, 2048], 'T2_J': [1, 64, 128, 256, 512, 1024, 2048], 'T2_I': [1, 64, 128, 256, 512, 1024, 2048], 'VEC2': [False, True], 'VEC1': [False, True], 'RT_I': [1, 8, 32], 'SCR': [False, True], 'RT_J': [1, 8, 32]}
Current Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Constraint Text: True and (((T2_I ==1 )or (T2_I %T1_I ==0 ))) and (((T2_J ==1 )or (T2_J %T1_J ==0 ))) and (((T2_K ==1 )or (T2_K %T1_K ==0 ))) and ((RT_I *RT_J +RT_I *RT_K +RT_J *RT_K <=150 )) and (((U_I ==1 )or (U_J ==1 )or (U_K ==1 )))
Updated Constraint: True and (((variable_ranges["T2_I"][int(x[3])] ==1 )or (variable_ranges["T2_I"][int(x[3])] %variable_ranges["T1_I"][int(x[0])] ==0 ))) and (((variable_ranges["T2_J"][int(x[4])] ==1 )or (variable_ranges["T2_J"][int(x[4])] %variable_ranges["T1_J"][int(x[1])] ==0 ))) and (((variable_ranges["T2_K"][int(x[5])] ==1 )or (variable_ranges["T2_K"][int(x[5])] %variable_ranges["T1_K"][int(x[2])] ==0 ))) and ((variable_ranges["RT_I"][int(x[12])] *variable_ranges["RT_J"][int(x[13])] +variable_ranges["RT_I"][int(x[12])] *variable_ranges["RT_K"][int(x[14])] +variable_ranges["RT_J"][int(x[13])] *variable_ranges["RT_K"][int(x[14])] <=150 )) and (((variable_ranges["U_I"][int(x[9])] ==1 )or (variable_ranges["U_J"][int(x[10])] ==1 )or (variable_ranges["U_K"][int(x[11])] ==1 )))
Computing D-Optimal Design with 46 experiments
Design Formula:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_x + ACOPY_y + U1_I + U_I + U_J + U_K + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2 + I(1 / (1 + T1_I)) + I(1 / (1 + T1_J)) + I(1 / (1 + T1_K)) + I(1 / (1 + T2_I)) + I(1 / (1 + T2_J)) + I(1 / (1 + T2_K)) + I(1 / (1 + U1_I)) + I(1 / (1 + U_I)) + I(1 / (1 + U_J)) + I(1 / (1 + U_K)) + I(1 / (1 + RT_I)) + I(1 / (1 + RT_J)) + I(1 / (1 + RT_K))
Generating search space of size 460 for optFederov (does not spend evaluations)
Valid coordinates: 92
Valid coordinates: 184
Tested coordinates: 10000
Valid coordinates: 276
Valid coordinates: 368
Valid coordinates: 460
Valid/Tested configurations: 460/18193
Generated Search Space:
NULL
Model Matrix Names: NULL
Model Matrix Det: 4.506714601466881e+68
LU Decomposition L:
[[ 1.    0.    0.   ...  0.    0.    0.  ]
 [ 0.19  1.    0.   ...  0.    0.    0.  ]
 [ 0.19  0.07  1.   ...  0.    0.    0.  ]
 ...
 [ 0.05  0.02  0.   ...  1.    0.    0.  ]
 [ 0.05  0.01 -0.02 ...  0.21  1.    0.  ]
 [ 0.06  0.02 -0.   ...  0.16  0.18  1.  ]]
LU Decomposition U:
[[ 6.53e+03  1.70e+04  1.79e+04 ...  5.10e+03  5.13e+03  5.23e+03]
 [ 0.00e+00  1.65e+03 -1.57e+01 ...  2.13e+00 -1.62e+01 -6.14e-01]
 [ 0.00e+00  0.00e+00  1.64e+03 ...  6.62e+00 -2.61e+01 -4.91e+00]
 ...
 [ 0.00e+00  0.00e+00  0.00e+00 ...  2.03e+00  4.19e-01  3.33e-01]
 [ 0.00e+00  0.00e+00  0.00e+00 ...  0.00e+00  1.93e+00  3.55e-01]
 [ 0.00e+00  0.00e+00  0.00e+00 ...  0.00e+00  0.00e+00  1.78e+00]]
LU Decomposition P:
[[0. 0. 0. ... 0. 0. 0.]
 [0. 1. 0. ... 0. 0. 0.]
 [0. 0. 1. ... 0. 0. 0.]
 ...
 [0. 0. 0. ... 1. 0. 0.]
 [0. 0. 0. ... 0. 1. 0.]
 [0. 0. 0. ... 0. 0. 1.]]
Computing Dependency Between Columns
(i: 0, j: 1)
Independent
(i: 0, j: 2)
Independent
(i: 0, j: 3)
Independent
(i: 0, j: 4)
Independent
(i: 0, j: 5)
Independent
(i: 0, j: 6)
Independent
(i: 0, j: 7)
Independent
(i: 0, j: 8)
Independent
(i: 0, j: 9)
Independent
(i: 0, j: 10)
Independent
(i: 0, j: 11)
Independent
(i: 0, j: 12)
Independent
(i: 0, j: 13)
Independent
(i: 0, j: 14)
Independent
(i: 0, j: 15)
Independent
(i: 0, j: 16)
Independent
(i: 0, j: 17)
Independent
(i: 0, j: 18)
Independent
(i: 0, j: 19)
Independent
(i: 0, j: 20)
Independent
(i: 0, j: 21)
Independent
(i: 0, j: 22)
Independent
(i: 0, j: 23)
Independent
(i: 0, j: 24)
Independent
(i: 0, j: 25)
Independent
(i: 0, j: 26)
Independent
(i: 0, j: 27)
Independent
(i: 0, j: 28)
Independent
(i: 0, j: 29)
Independent
(i: 0, j: 30)
Independent
(i: 0, j: 31)
Independent
(i: 1, j: 0)
Independent
(i: 1, j: 2)
Independent
(i: 1, j: 3)
Independent
(i: 1, j: 4)
Independent
(i: 1, j: 5)
Independent
(i: 1, j: 6)
Independent
(i: 1, j: 7)
Independent
(i: 1, j: 8)
Independent
(i: 1, j: 9)
Independent
(i: 1, j: 10)
Independent
(i: 1, j: 11)
Independent
(i: 1, j: 12)
Independent
(i: 1, j: 13)
Independent
(i: 1, j: 14)
Independent
(i: 1, j: 15)
Independent
(i: 1, j: 16)
Independent
(i: 1, j: 17)
Independent
(i: 1, j: 18)
Independent
(i: 1, j: 19)
Independent
(i: 1, j: 20)
Independent
(i: 1, j: 21)
Independent
(i: 1, j: 22)
Independent
(i: 1, j: 23)
Independent
(i: 1, j: 24)
Independent
(i: 1, j: 25)
Independent
(i: 1, j: 26)
Independent
(i: 1, j: 27)
Independent
(i: 1, j: 28)
Independent
(i: 1, j: 29)
Independent
(i: 1, j: 30)
Independent
(i: 1, j: 31)
Independent
(i: 2, j: 0)
Independent
(i: 2, j: 1)
Independent
(i: 2, j: 3)
Independent
(i: 2, j: 4)
Independent
(i: 2, j: 5)
Independent
(i: 2, j: 6)
Independent
(i: 2, j: 7)
Independent
(i: 2, j: 8)
Independent
(i: 2, j: 9)
Independent
(i: 2, j: 10)
Independent
(i: 2, j: 11)
Independent
(i: 2, j: 12)
Independent
(i: 2, j: 13)
Independent
(i: 2, j: 14)
Independent
(i: 2, j: 15)
Independent
(i: 2, j: 16)
Independent
(i: 2, j: 17)
Independent
(i: 2, j: 18)
Independent
(i: 2, j: 19)
Independent
(i: 2, j: 20)
Independent
(i: 2, j: 21)
Independent
(i: 2, j: 22)
Independent
(i: 2, j: 23)
Independent
(i: 2, j: 24)
Independent
(i: 2, j: 25)
Independent
(i: 2, j: 26)
Independent
(i: 2, j: 27)
Independent
(i: 2, j: 28)
Independent
(i: 2, j: 29)
Independent
(i: 2, j: 30)
Independent
(i: 2, j: 31)
Independent
(i: 3, j: 0)
Independent
(i: 3, j: 1)
Independent
(i: 3, j: 2)
Independent
(i: 3, j: 4)
Independent
(i: 3, j: 5)
Independent
(i: 3, j: 6)
Independent
(i: 3, j: 7)
Independent
(i: 3, j: 8)
Independent
(i: 3, j: 9)
Independent
(i: 3, j: 10)
Independent
(i: 3, j: 11)
Independent
(i: 3, j: 12)
Independent
(i: 3, j: 13)
Independent
(i: 3, j: 14)
Independent
(i: 3, j: 15)
Independent
(i: 3, j: 16)
Independent
(i: 3, j: 17)
Independent
(i: 3, j: 18)
Independent
(i: 3, j: 19)
Independent
(i: 3, j: 20)
Independent
(i: 3, j: 21)
Independent
(i: 3, j: 22)
Independent
(i: 3, j: 23)
Independent
(i: 3, j: 24)
Independent
(i: 3, j: 25)
Independent
(i: 3, j: 26)
Independent
(i: 3, j: 27)
Independent
(i: 3, j: 28)
Independent
(i: 3, j: 29)
Independent
(i: 3, j: 30)
Independent
(i: 3, j: 31)
Independent
(i: 4, j: 0)
Independent
(i: 4, j: 1)
Independent
(i: 4, j: 2)
Independent
(i: 4, j: 3)
Independent
(i: 4, j: 5)
Independent
(i: 4, j: 6)
Independent
(i: 4, j: 7)
Independent
(i: 4, j: 8)
Independent
(i: 4, j: 9)
Independent
(i: 4, j: 10)
Independent
(i: 4, j: 11)
Independent
(i: 4, j: 12)
Independent
(i: 4, j: 13)
Independent
(i: 4, j: 14)
Independent
(i: 4, j: 15)
Independent
(i: 4, j: 16)
Independent
(i: 4, j: 17)
Independent
(i: 4, j: 18)
Independent
(i: 4, j: 19)
Independent
(i: 4, j: 20)
Independent
(i: 4, j: 21)
Independent
(i: 4, j: 22)
Independent
(i: 4, j: 23)
Independent
(i: 4, j: 24)
Independent
(i: 4, j: 25)
Independent
(i: 4, j: 26)
Independent
(i: 4, j: 27)
Independent
(i: 4, j: 28)
Independent
(i: 4, j: 29)
Independent
(i: 4, j: 30)
Independent
(i: 4, j: 31)
Independent
(i: 5, j: 0)
Independent
(i: 5, j: 1)
Independent
(i: 5, j: 2)
Independent
(i: 5, j: 3)
Independent
(i: 5, j: 4)
Independent
(i: 5, j: 6)
Independent
(i: 5, j: 7)
Independent
(i: 5, j: 8)
Independent
(i: 5, j: 9)
Independent
(i: 5, j: 10)
Independent
(i: 5, j: 11)
Independent
(i: 5, j: 12)
Independent
(i: 5, j: 13)
Independent
(i: 5, j: 14)
Independent
(i: 5, j: 15)
Independent
(i: 5, j: 16)
Independent
(i: 5, j: 17)
Independent
(i: 5, j: 18)
Independent
(i: 5, j: 19)
Independent
(i: 5, j: 20)
Independent
(i: 5, j: 21)
Independent
(i: 5, j: 22)
Independent
(i: 5, j: 23)
Independent
(i: 5, j: 24)
Independent
(i: 5, j: 25)
Independent
(i: 5, j: 26)
Independent
(i: 5, j: 27)
Independent
(i: 5, j: 28)
Independent
(i: 5, j: 29)
Independent
(i: 5, j: 30)
Independent
(i: 5, j: 31)
Independent
(i: 6, j: 0)
Independent
(i: 6, j: 1)
Independent
(i: 6, j: 2)
Independent
(i: 6, j: 3)
Independent
(i: 6, j: 4)
Independent
(i: 6, j: 5)
Independent
(i: 6, j: 7)
Independent
(i: 6, j: 8)
Independent
(i: 6, j: 9)
Independent
(i: 6, j: 10)
Independent
(i: 6, j: 11)
Independent
(i: 6, j: 12)
Independent
(i: 6, j: 13)
Independent
(i: 6, j: 14)
Independent
(i: 6, j: 15)
Independent
(i: 6, j: 16)
Independent
(i: 6, j: 17)
Independent
(i: 6, j: 18)
Independent
(i: 6, j: 19)
Independent
(i: 6, j: 20)
Independent
(i: 6, j: 21)
Independent
(i: 6, j: 22)
Independent
(i: 6, j: 23)
Independent
(i: 6, j: 24)
Independent
(i: 6, j: 25)
Independent
(i: 6, j: 26)
Independent
(i: 6, j: 27)
Independent
(i: 6, j: 28)
Independent
(i: 6, j: 29)
Independent
(i: 6, j: 30)
Independent
(i: 6, j: 31)
Independent
(i: 7, j: 0)
Independent
(i: 7, j: 1)
Independent
(i: 7, j: 2)
Independent
(i: 7, j: 3)
Independent
(i: 7, j: 4)
Independent
(i: 7, j: 5)
Independent
(i: 7, j: 6)
Independent
(i: 7, j: 8)
Independent
(i: 7, j: 9)
Independent
(i: 7, j: 10)
Independent
(i: 7, j: 11)
Independent
(i: 7, j: 12)
Independent
(i: 7, j: 13)
Independent
(i: 7, j: 14)
Independent
(i: 7, j: 15)
Independent
(i: 7, j: 16)
Independent
(i: 7, j: 17)
Independent
(i: 7, j: 18)
Independent
(i: 7, j: 19)
Independent
(i: 7, j: 20)
Independent
(i: 7, j: 21)
Independent
(i: 7, j: 22)
Independent
(i: 7, j: 23)
Independent
(i: 7, j: 24)
Independent
(i: 7, j: 25)
Independent
(i: 7, j: 26)
Independent
(i: 7, j: 27)
Independent
(i: 7, j: 28)
Independent
(i: 7, j: 29)
Independent
(i: 7, j: 30)
Independent
(i: 7, j: 31)
Independent
(i: 8, j: 0)
Independent
(i: 8, j: 1)
Independent
(i: 8, j: 2)
Independent
(i: 8, j: 3)
Independent
(i: 8, j: 4)
Independent
(i: 8, j: 5)
Independent
(i: 8, j: 6)
Independent
(i: 8, j: 7)
Independent
(i: 8, j: 9)
Independent
(i: 8, j: 10)
Independent
(i: 8, j: 11)
Independent
(i: 8, j: 12)
Independent
(i: 8, j: 13)
Independent
(i: 8, j: 14)
Independent
(i: 8, j: 15)
Independent
(i: 8, j: 16)
Independent
(i: 8, j: 17)
Independent
(i: 8, j: 18)
Independent
(i: 8, j: 19)
Independent
(i: 8, j: 20)
Independent
(i: 8, j: 21)
Independent
(i: 8, j: 22)
Independent
(i: 8, j: 23)
Independent
(i: 8, j: 24)
Independent
(i: 8, j: 25)
Independent
(i: 8, j: 26)
Independent
(i: 8, j: 27)
Independent
(i: 8, j: 28)
Independent
(i: 8, j: 29)
Independent
(i: 8, j: 30)
Independent
(i: 8, j: 31)
Independent
(i: 9, j: 0)
Independent
(i: 9, j: 1)
Independent
(i: 9, j: 2)
Independent
(i: 9, j: 3)
Independent
(i: 9, j: 4)
Independent
(i: 9, j: 5)
Independent
(i: 9, j: 6)
Independent
(i: 9, j: 7)
Independent
(i: 9, j: 8)
Independent
(i: 9, j: 10)
Independent
(i: 9, j: 11)
Independent
(i: 9, j: 12)
Independent
(i: 9, j: 13)
Independent
(i: 9, j: 14)
Independent
(i: 9, j: 15)
Independent
(i: 9, j: 16)
Independent
(i: 9, j: 17)
Independent
(i: 9, j: 18)
Independent
(i: 9, j: 19)
Independent
(i: 9, j: 20)
Independent
(i: 9, j: 21)
Independent
(i: 9, j: 22)
Independent
(i: 9, j: 23)
Independent
(i: 9, j: 24)
Independent
(i: 9, j: 25)
Independent
(i: 9, j: 26)
Independent
(i: 9, j: 27)
Independent
(i: 9, j: 28)
Independent
(i: 9, j: 29)
Independent
(i: 9, j: 30)
Independent
(i: 9, j: 31)
Independent
(i: 10, j: 0)
Independent
(i: 10, j: 1)
Independent
(i: 10, j: 2)
Independent
(i: 10, j: 3)
Independent
(i: 10, j: 4)
Independent
(i: 10, j: 5)
Independent
(i: 10, j: 6)
Independent
(i: 10, j: 7)
Independent
(i: 10, j: 8)
Independent
(i: 10, j: 9)
Independent
(i: 10, j: 11)
Independent
(i: 10, j: 12)
Independent
(i: 10, j: 13)
Independent
(i: 10, j: 14)
Independent
(i: 10, j: 15)
Independent
(i: 10, j: 16)
Independent
(i: 10, j: 17)
Independent
(i: 10, j: 18)
Independent
(i: 10, j: 19)
Independent
(i: 10, j: 20)
Independent
(i: 10, j: 21)
Independent
(i: 10, j: 22)
Independent
(i: 10, j: 23)
Independent
(i: 10, j: 24)
Independent
(i: 10, j: 25)
Independent
(i: 10, j: 26)
Independent
(i: 10, j: 27)
Independent
(i: 10, j: 28)
Independent
(i: 10, j: 29)
Independent
(i: 10, j: 30)
Independent
(i: 10, j: 31)
Independent
(i: 11, j: 0)
Independent
(i: 11, j: 1)
Independent
(i: 11, j: 2)
Independent
(i: 11, j: 3)
Independent
(i: 11, j: 4)
Independent
(i: 11, j: 5)
Independent
(i: 11, j: 6)
Independent
(i: 11, j: 7)
Independent
(i: 11, j: 8)
Independent
(i: 11, j: 9)
Independent
(i: 11, j: 10)
Independent
(i: 11, j: 12)
Independent
(i: 11, j: 13)
Independent
(i: 11, j: 14)
Independent
(i: 11, j: 15)
Independent
(i: 11, j: 16)
Independent
(i: 11, j: 17)
Independent
(i: 11, j: 18)
Independent
(i: 11, j: 19)
Independent
(i: 11, j: 20)
Independent
(i: 11, j: 21)
Independent
(i: 11, j: 22)
Independent
(i: 11, j: 23)
Independent
(i: 11, j: 24)
Independent
(i: 11, j: 25)
Independent
(i: 11, j: 26)
Independent
(i: 11, j: 27)
Independent
(i: 11, j: 28)
Independent
(i: 11, j: 29)
Independent
(i: 11, j: 30)
Independent
(i: 11, j: 31)
Independent
(i: 12, j: 0)
Independent
(i: 12, j: 1)
Independent
(i: 12, j: 2)
Independent
(i: 12, j: 3)
Independent
(i: 12, j: 4)
Independent
(i: 12, j: 5)
Independent
(i: 12, j: 6)
Independent
(i: 12, j: 7)
Independent
(i: 12, j: 8)
Independent
(i: 12, j: 9)
Independent
(i: 12, j: 10)
Independent
(i: 12, j: 11)
Independent
(i: 12, j: 13)
Independent
(i: 12, j: 14)
Independent
(i: 12, j: 15)
Independent
(i: 12, j: 16)
Independent
(i: 12, j: 17)
Independent
(i: 12, j: 18)
Independent
(i: 12, j: 19)
Independent
(i: 12, j: 20)
Independent
(i: 12, j: 21)
Independent
(i: 12, j: 22)
Independent
(i: 12, j: 23)
Independent
(i: 12, j: 24)
Independent
(i: 12, j: 25)
Independent
(i: 12, j: 26)
Independent
(i: 12, j: 27)
Independent
(i: 12, j: 28)
Independent
(i: 12, j: 29)
Independent
(i: 12, j: 30)
Independent
(i: 12, j: 31)
Independent
(i: 13, j: 0)
Independent
(i: 13, j: 1)
Independent
(i: 13, j: 2)
Independent
(i: 13, j: 3)
Independent
(i: 13, j: 4)
Independent
(i: 13, j: 5)
Independent
(i: 13, j: 6)
Independent
(i: 13, j: 7)
Independent
(i: 13, j: 8)
Independent
(i: 13, j: 9)
Independent
(i: 13, j: 10)
Independent
(i: 13, j: 11)
Independent
(i: 13, j: 12)
Independent
(i: 13, j: 14)
Independent
(i: 13, j: 15)
Independent
(i: 13, j: 16)
Independent
(i: 13, j: 17)
Independent
(i: 13, j: 18)
Independent
(i: 13, j: 19)
Independent
(i: 13, j: 20)
Independent
(i: 13, j: 21)
Independent
(i: 13, j: 22)
Independent
(i: 13, j: 23)
Independent
(i: 13, j: 24)
Independent
(i: 13, j: 25)
Independent
(i: 13, j: 26)
Independent
(i: 13, j: 27)
Independent
(i: 13, j: 28)
Independent
(i: 13, j: 29)
Independent
(i: 13, j: 30)
Independent
(i: 13, j: 31)
Independent
(i: 14, j: 0)
Independent
(i: 14, j: 1)
Independent
(i: 14, j: 2)
Independent
(i: 14, j: 3)
Independent
(i: 14, j: 4)
Independent
(i: 14, j: 5)
Independent
(i: 14, j: 6)
Independent
(i: 14, j: 7)
Independent
(i: 14, j: 8)
Independent
(i: 14, j: 9)
Independent
(i: 14, j: 10)
Independent
(i: 14, j: 11)
Independent
(i: 14, j: 12)
Independent
(i: 14, j: 13)
Independent
(i: 14, j: 15)
Independent
(i: 14, j: 16)
Independent
(i: 14, j: 17)
Independent
(i: 14, j: 18)
Independent
(i: 14, j: 19)
Independent
(i: 14, j: 20)
Independent
(i: 14, j: 21)
Independent
(i: 14, j: 22)
Independent
(i: 14, j: 23)
Independent
(i: 14, j: 24)
Independent
(i: 14, j: 25)
Independent
(i: 14, j: 26)
Independent
(i: 14, j: 27)
Independent
(i: 14, j: 28)
Independent
(i: 14, j: 29)
Independent
(i: 14, j: 30)
Independent
(i: 14, j: 31)
Independent
(i: 15, j: 0)
Independent
(i: 15, j: 1)
Independent
(i: 15, j: 2)
Independent
(i: 15, j: 3)
Independent
(i: 15, j: 4)
Independent
(i: 15, j: 5)
Independent
(i: 15, j: 6)
Independent
(i: 15, j: 7)
Independent
(i: 15, j: 8)
Independent
(i: 15, j: 9)
Independent
(i: 15, j: 10)
Independent
(i: 15, j: 11)
Independent
(i: 15, j: 12)
Independent
(i: 15, j: 13)
Independent
(i: 15, j: 14)
Independent
(i: 15, j: 16)
Independent
(i: 15, j: 17)
Independent
(i: 15, j: 18)
Independent
(i: 15, j: 19)
Independent
(i: 15, j: 20)
Independent
(i: 15, j: 21)
Independent
(i: 15, j: 22)
Independent
(i: 15, j: 23)
Independent
(i: 15, j: 24)
Independent
(i: 15, j: 25)
Independent
(i: 15, j: 26)
Independent
(i: 15, j: 27)
Independent
(i: 15, j: 28)
Independent
(i: 15, j: 29)
Independent
(i: 15, j: 30)
Independent
(i: 15, j: 31)
Independent
(i: 16, j: 0)
Independent
(i: 16, j: 1)
Independent
(i: 16, j: 2)
Independent
(i: 16, j: 3)
Independent
(i: 16, j: 4)
Independent
(i: 16, j: 5)
Independent
(i: 16, j: 6)
Independent
(i: 16, j: 7)
Independent
(i: 16, j: 8)
Independent
(i: 16, j: 9)
Independent
(i: 16, j: 10)
Independent
(i: 16, j: 11)
Independent
(i: 16, j: 12)
Independent
(i: 16, j: 13)
Independent
(i: 16, j: 14)
Independent
(i: 16, j: 15)
Independent
(i: 16, j: 17)
Independent
(i: 16, j: 18)
Independent
(i: 16, j: 19)
Independent
(i: 16, j: 20)
Independent
(i: 16, j: 21)
Independent
(i: 16, j: 22)
Independent
(i: 16, j: 23)
Independent
(i: 16, j: 24)
Independent
(i: 16, j: 25)
Independent
(i: 16, j: 26)
Independent
(i: 16, j: 27)
Independent
(i: 16, j: 28)
Independent
(i: 16, j: 29)
Independent
(i: 16, j: 30)
Independent
(i: 16, j: 31)
Independent
(i: 17, j: 0)
Independent
(i: 17, j: 1)
Independent
(i: 17, j: 2)
Independent
(i: 17, j: 3)
Independent
(i: 17, j: 4)
Independent
(i: 17, j: 5)
Independent
(i: 17, j: 6)
Independent
(i: 17, j: 7)
Independent
(i: 17, j: 8)
Independent
(i: 17, j: 9)
Independent
(i: 17, j: 10)
Independent
(i: 17, j: 11)
Independent
(i: 17, j: 12)
Independent
(i: 17, j: 13)
Independent
(i: 17, j: 14)
Independent
(i: 17, j: 15)
Independent
(i: 17, j: 16)
Independent
(i: 17, j: 18)
Independent
(i: 17, j: 19)
Independent
(i: 17, j: 20)
Independent
(i: 17, j: 21)
Independent
(i: 17, j: 22)
Independent
(i: 17, j: 23)
Independent
(i: 17, j: 24)
Independent
(i: 17, j: 25)
Independent
(i: 17, j: 26)
Independent
(i: 17, j: 27)
Independent
(i: 17, j: 28)
Independent
(i: 17, j: 29)
Independent
(i: 17, j: 30)
Independent
(i: 17, j: 31)
Independent
(i: 18, j: 0)
Independent
(i: 18, j: 1)
Independent
(i: 18, j: 2)
Independent
(i: 18, j: 3)
Independent
(i: 18, j: 4)
Independent
(i: 18, j: 5)
Independent
(i: 18, j: 6)
Independent
(i: 18, j: 7)
Independent
(i: 18, j: 8)
Independent
(i: 18, j: 9)
Independent
(i: 18, j: 10)
Independent
(i: 18, j: 11)
Independent
(i: 18, j: 12)
Independent
(i: 18, j: 13)
Independent
(i: 18, j: 14)
Independent
(i: 18, j: 15)
Independent
(i: 18, j: 16)
Independent
(i: 18, j: 17)
Independent
(i: 18, j: 19)
Independent
(i: 18, j: 20)
Independent
(i: 18, j: 21)
Independent
(i: 18, j: 22)
Independent
(i: 18, j: 23)
Independent
(i: 18, j: 24)
Independent
(i: 18, j: 25)
Independent
(i: 18, j: 26)
Independent
(i: 18, j: 27)
Independent
(i: 18, j: 28)
Independent
(i: 18, j: 29)
Independent
(i: 18, j: 30)
Independent
(i: 18, j: 31)
Independent
(i: 19, j: 0)
Independent
(i: 19, j: 1)
Independent
(i: 19, j: 2)
Independent
(i: 19, j: 3)
Independent
(i: 19, j: 4)
Independent
(i: 19, j: 5)
Independent
(i: 19, j: 6)
Independent
(i: 19, j: 7)
Independent
(i: 19, j: 8)
Independent
(i: 19, j: 9)
Independent
(i: 19, j: 10)
Independent
(i: 19, j: 11)
Independent
(i: 19, j: 12)
Independent
(i: 19, j: 13)
Independent
(i: 19, j: 14)
Independent
(i: 19, j: 15)
Independent
(i: 19, j: 16)
Independent
(i: 19, j: 17)
Independent
(i: 19, j: 18)
Independent
(i: 19, j: 20)
Independent
(i: 19, j: 21)
Independent
(i: 19, j: 22)
Independent
(i: 19, j: 23)
Independent
(i: 19, j: 24)
Independent
(i: 19, j: 25)
Independent
(i: 19, j: 26)
Independent
(i: 19, j: 27)
Independent
(i: 19, j: 28)
Independent
(i: 19, j: 29)
Independent
(i: 19, j: 30)
Independent
(i: 19, j: 31)
Independent
(i: 20, j: 0)
Independent
(i: 20, j: 1)
Independent
(i: 20, j: 2)
Independent
(i: 20, j: 3)
Independent
(i: 20, j: 4)
Independent
(i: 20, j: 5)
Independent
(i: 20, j: 6)
Independent
(i: 20, j: 7)
Independent
(i: 20, j: 8)
Independent
(i: 20, j: 9)
Independent
(i: 20, j: 10)
Independent
(i: 20, j: 11)
Independent
(i: 20, j: 12)
Independent
(i: 20, j: 13)
Independent
(i: 20, j: 14)
Independent
(i: 20, j: 15)
Independent
(i: 20, j: 16)
Independent
(i: 20, j: 17)
Independent
(i: 20, j: 18)
Independent
(i: 20, j: 19)
Independent
(i: 20, j: 21)
Independent
(i: 20, j: 22)
Independent
(i: 20, j: 23)
Independent
(i: 20, j: 24)
Independent
(i: 20, j: 25)
Independent
(i: 20, j: 26)
Independent
(i: 20, j: 27)
Independent
(i: 20, j: 28)
Independent
(i: 20, j: 29)
Independent
(i: 20, j: 30)
Independent
(i: 20, j: 31)
Independent
(i: 21, j: 0)
Independent
(i: 21, j: 1)
Independent
(i: 21, j: 2)
Independent
(i: 21, j: 3)
Independent
(i: 21, j: 4)
Independent
(i: 21, j: 5)
Independent
(i: 21, j: 6)
Independent
(i: 21, j: 7)
Independent
(i: 21, j: 8)
Independent
(i: 21, j: 9)
Independent
(i: 21, j: 10)
Independent
(i: 21, j: 11)
Independent
(i: 21, j: 12)
Independent
(i: 21, j: 13)
Independent
(i: 21, j: 14)
Independent
(i: 21, j: 15)
Independent
(i: 21, j: 16)
Independent
(i: 21, j: 17)
Independent
(i: 21, j: 18)
Independent
(i: 21, j: 19)
Independent
(i: 21, j: 20)
Independent
(i: 21, j: 22)
Independent
(i: 21, j: 23)
Independent
(i: 21, j: 24)
Independent
(i: 21, j: 25)
Independent
(i: 21, j: 26)
Independent
(i: 21, j: 27)
Independent
(i: 21, j: 28)
Independent
(i: 21, j: 29)
Independent
(i: 21, j: 30)
Independent
(i: 21, j: 31)
Independent
(i: 22, j: 0)
Independent
(i: 22, j: 1)
Independent
(i: 22, j: 2)
Independent
(i: 22, j: 3)
Independent
(i: 22, j: 4)
Independent
(i: 22, j: 5)
Independent
(i: 22, j: 6)
Independent
(i: 22, j: 7)
Independent
(i: 22, j: 8)
Independent
(i: 22, j: 9)
Independent
(i: 22, j: 10)
Independent
(i: 22, j: 11)
Independent
(i: 22, j: 12)
Independent
(i: 22, j: 13)
Independent
(i: 22, j: 14)
Independent
(i: 22, j: 15)
Independent
(i: 22, j: 16)
Independent
(i: 22, j: 17)
Independent
(i: 22, j: 18)
Independent
(i: 22, j: 19)
Independent
(i: 22, j: 20)
Independent
(i: 22, j: 21)
Independent
(i: 22, j: 23)
Independent
(i: 22, j: 24)
Independent
(i: 22, j: 25)
Independent
(i: 22, j: 26)
Independent
(i: 22, j: 27)
Independent
(i: 22, j: 28)
Independent
(i: 22, j: 29)
Independent
(i: 22, j: 30)
Independent
(i: 22, j: 31)
Independent
(i: 23, j: 0)
Independent
(i: 23, j: 1)
Independent
(i: 23, j: 2)
Independent
(i: 23, j: 3)
Independent
(i: 23, j: 4)
Independent
(i: 23, j: 5)
Independent
(i: 23, j: 6)
Independent
(i: 23, j: 7)
Independent
(i: 23, j: 8)
Independent
(i: 23, j: 9)
Independent
(i: 23, j: 10)
Independent
(i: 23, j: 11)
Independent
(i: 23, j: 12)
Independent
(i: 23, j: 13)
Independent
(i: 23, j: 14)
Independent
(i: 23, j: 15)
Independent
(i: 23, j: 16)
Independent
(i: 23, j: 17)
Independent
(i: 23, j: 18)
Independent
(i: 23, j: 19)
Independent
(i: 23, j: 20)
Independent
(i: 23, j: 21)
Independent
(i: 23, j: 22)
Independent
(i: 23, j: 24)
Independent
(i: 23, j: 25)
Independent
(i: 23, j: 26)
Independent
(i: 23, j: 27)
Independent
(i: 23, j: 28)
Independent
(i: 23, j: 29)
Independent
(i: 23, j: 30)
Independent
(i: 23, j: 31)
Independent
(i: 24, j: 0)
Independent
(i: 24, j: 1)
Independent
(i: 24, j: 2)
Independent
(i: 24, j: 3)
Independent
(i: 24, j: 4)
Independent
(i: 24, j: 5)
Independent
(i: 24, j: 6)
Independent
(i: 24, j: 7)
Independent
(i: 24, j: 8)
Independent
(i: 24, j: 9)
Independent
(i: 24, j: 10)
Independent
(i: 24, j: 11)
Independent
(i: 24, j: 12)
Independent
(i: 24, j: 13)
Independent
(i: 24, j: 14)
Independent
(i: 24, j: 15)
Independent
(i: 24, j: 16)
Independent
(i: 24, j: 17)
Independent
(i: 24, j: 18)
Independent
(i: 24, j: 19)
Independent
(i: 24, j: 20)
Independent
(i: 24, j: 21)
Independent
(i: 24, j: 22)
Independent
(i: 24, j: 23)
Independent
(i: 24, j: 25)
Independent
(i: 24, j: 26)
Independent
(i: 24, j: 27)
Independent
(i: 24, j: 28)
Independent
(i: 24, j: 29)
Independent
(i: 24, j: 30)
Independent
(i: 24, j: 31)
Independent
(i: 25, j: 0)
Independent
(i: 25, j: 1)
Independent
(i: 25, j: 2)
Independent
(i: 25, j: 3)
Independent
(i: 25, j: 4)
Independent
(i: 25, j: 5)
Independent
(i: 25, j: 6)
Independent
(i: 25, j: 7)
Independent
(i: 25, j: 8)
Independent
(i: 25, j: 9)
Independent
(i: 25, j: 10)
Independent
(i: 25, j: 11)
Independent
(i: 25, j: 12)
Independent
(i: 25, j: 13)
Independent
(i: 25, j: 14)
Independent
(i: 25, j: 15)
Independent
(i: 25, j: 16)
Independent
(i: 25, j: 17)
Independent
(i: 25, j: 18)
Independent
(i: 25, j: 19)
Independent
(i: 25, j: 20)
Independent
(i: 25, j: 21)
Independent
(i: 25, j: 22)
Independent
(i: 25, j: 23)
Independent
(i: 25, j: 24)
Independent
(i: 25, j: 26)
Independent
(i: 25, j: 27)
Independent
(i: 25, j: 28)
Independent
(i: 25, j: 29)
Independent
(i: 25, j: 30)
Independent
(i: 25, j: 31)
Independent
(i: 26, j: 0)
Independent
(i: 26, j: 1)
Independent
(i: 26, j: 2)
Independent
(i: 26, j: 3)
Independent
(i: 26, j: 4)
Independent
(i: 26, j: 5)
Independent
(i: 26, j: 6)
Independent
(i: 26, j: 7)
Independent
(i: 26, j: 8)
Independent
(i: 26, j: 9)
Independent
(i: 26, j: 10)
Independent
(i: 26, j: 11)
Independent
(i: 26, j: 12)
Independent
(i: 26, j: 13)
Independent
(i: 26, j: 14)
Independent
(i: 26, j: 15)
Independent
(i: 26, j: 16)
Independent
(i: 26, j: 17)
Independent
(i: 26, j: 18)
Independent
(i: 26, j: 19)
Independent
(i: 26, j: 20)
Independent
(i: 26, j: 21)
Independent
(i: 26, j: 22)
Independent
(i: 26, j: 23)
Independent
(i: 26, j: 24)
Independent
(i: 26, j: 25)
Independent
(i: 26, j: 27)
Independent
(i: 26, j: 28)
Independent
(i: 26, j: 29)
Independent
(i: 26, j: 30)
Independent
(i: 26, j: 31)
Independent
(i: 27, j: 0)
Independent
(i: 27, j: 1)
Independent
(i: 27, j: 2)
Independent
(i: 27, j: 3)
Independent
(i: 27, j: 4)
Independent
(i: 27, j: 5)
Independent
(i: 27, j: 6)
Independent
(i: 27, j: 7)
Independent
(i: 27, j: 8)
Independent
(i: 27, j: 9)
Independent
(i: 27, j: 10)
Independent
(i: 27, j: 11)
Independent
(i: 27, j: 12)
Independent
(i: 27, j: 13)
Independent
(i: 27, j: 14)
Independent
(i: 27, j: 15)
Independent
(i: 27, j: 16)
Independent
(i: 27, j: 17)
Independent
(i: 27, j: 18)
Independent
(i: 27, j: 19)
Independent
(i: 27, j: 20)
Independent
(i: 27, j: 21)
Independent
(i: 27, j: 22)
Independent
(i: 27, j: 23)
Independent
(i: 27, j: 24)
Independent
(i: 27, j: 25)
Independent
(i: 27, j: 26)
Independent
(i: 27, j: 28)
Independent
(i: 27, j: 29)
Independent
(i: 27, j: 30)
Independent
(i: 27, j: 31)
Independent
(i: 28, j: 0)
Independent
(i: 28, j: 1)
Independent
(i: 28, j: 2)
Independent
(i: 28, j: 3)
Independent
(i: 28, j: 4)
Independent
(i: 28, j: 5)
Independent
(i: 28, j: 6)
Independent
(i: 28, j: 7)
Independent
(i: 28, j: 8)
Independent
(i: 28, j: 9)
Independent
(i: 28, j: 10)
Independent
(i: 28, j: 11)
Independent
(i: 28, j: 12)
Independent
(i: 28, j: 13)
Independent
(i: 28, j: 14)
Independent
(i: 28, j: 15)
Independent
(i: 28, j: 16)
Independent
(i: 28, j: 17)
Independent
(i: 28, j: 18)
Independent
(i: 28, j: 19)
Independent
(i: 28, j: 20)
Independent
(i: 28, j: 21)
Independent
(i: 28, j: 22)
Independent
(i: 28, j: 23)
Independent
(i: 28, j: 24)
Independent
(i: 28, j: 25)
Independent
(i: 28, j: 26)
Independent
(i: 28, j: 27)
Independent
(i: 28, j: 29)
Independent
(i: 28, j: 30)
Independent
(i: 28, j: 31)
Independent
(i: 29, j: 0)
Independent
(i: 29, j: 1)
Independent
(i: 29, j: 2)
Independent
(i: 29, j: 3)
Independent
(i: 29, j: 4)
Independent
(i: 29, j: 5)
Independent
(i: 29, j: 6)
Independent
(i: 29, j: 7)
Independent
(i: 29, j: 8)
Independent
(i: 29, j: 9)
Independent
(i: 29, j: 10)
Independent
(i: 29, j: 11)
Independent
(i: 29, j: 12)
Independent
(i: 29, j: 13)
Independent
(i: 29, j: 14)
Independent
(i: 29, j: 15)
Independent
(i: 29, j: 16)
Independent
(i: 29, j: 17)
Independent
(i: 29, j: 18)
Independent
(i: 29, j: 19)
Independent
(i: 29, j: 20)
Independent
(i: 29, j: 21)
Independent
(i: 29, j: 22)
Independent
(i: 29, j: 23)
Independent
(i: 29, j: 24)
Independent
(i: 29, j: 25)
Independent
(i: 29, j: 26)
Independent
(i: 29, j: 27)
Independent
(i: 29, j: 28)
Independent
(i: 29, j: 30)
Independent
(i: 29, j: 31)
Independent
(i: 30, j: 0)
Independent
(i: 30, j: 1)
Independent
(i: 30, j: 2)
Independent
(i: 30, j: 3)
Independent
(i: 30, j: 4)
Independent
(i: 30, j: 5)
Independent
(i: 30, j: 6)
Independent
(i: 30, j: 7)
Independent
(i: 30, j: 8)
Independent
(i: 30, j: 9)
Independent
(i: 30, j: 10)
Independent
(i: 30, j: 11)
Independent
(i: 30, j: 12)
Independent
(i: 30, j: 13)
Independent
(i: 30, j: 14)
Independent
(i: 30, j: 15)
Independent
(i: 30, j: 16)
Independent
(i: 30, j: 17)
Independent
(i: 30, j: 18)
Independent
(i: 30, j: 19)
Independent
(i: 30, j: 20)
Independent
(i: 30, j: 21)
Independent
(i: 30, j: 22)
Independent
(i: 30, j: 23)
Independent
(i: 30, j: 24)
Independent
(i: 30, j: 25)
Independent
(i: 30, j: 26)
Independent
(i: 30, j: 27)
Independent
(i: 30, j: 28)
Independent
(i: 30, j: 29)
Independent
(i: 30, j: 31)
Independent
(i: 31, j: 0)
Independent
(i: 31, j: 1)
Independent
(i: 31, j: 2)
Independent
(i: 31, j: 3)
Independent
(i: 31, j: 4)
Independent
(i: 31, j: 5)
Independent
(i: 31, j: 6)
Independent
(i: 31, j: 7)
Independent
(i: 31, j: 8)
Independent
(i: 31, j: 9)
Independent
(i: 31, j: 10)
Independent
(i: 31, j: 11)
Independent
(i: 31, j: 12)
Independent
(i: 31, j: 13)
Independent
(i: 31, j: 14)
Independent
(i: 31, j: 15)
Independent
(i: 31, j: 16)
Independent
(i: 31, j: 17)
Independent
(i: 31, j: 18)
Independent
(i: 31, j: 19)
Independent
(i: 31, j: 20)
Independent
(i: 31, j: 21)
Independent
(i: 31, j: 22)
Independent
(i: 31, j: 23)
Independent
(i: 31, j: 24)
Independent
(i: 31, j: 25)
Independent
(i: 31, j: 26)
Independent
(i: 31, j: 27)
Independent
(i: 31, j: 28)
Independent
(i: 31, j: 29)
Independent
(i: 31, j: 30)
Independent
Starting "optFederov" run
Using Search Space:
NULL
Correlation between variables in the dataset:
                T1_I         T1_J          T1_K         T2_I         T2_J
T1_I     1.000000000  0.006108518 -0.0178905566  0.047296644  0.021960083
T1_J     0.006108518  1.000000000 -0.0070611456 -0.033622177  0.082613453
T1_K    -0.017890557 -0.007061146  1.0000000000  0.020676652 -0.073513250
T2_I     0.047296644 -0.033622177  0.0206766524  1.000000000 -0.068716646
T2_J     0.021960083  0.082613453 -0.0735132499 -0.068716646  1.000000000
T2_K     0.002054312  0.086713761  0.0165318176 -0.050224343  0.027070643
ACOPY_x  0.013109049  0.016330592  0.0462212603  0.009040868 -0.002943389
ACOPY_y -0.017085580 -0.004237084 -0.0009775993  0.053828267 -0.041630684
U1_I    -0.068558565  0.017142377  0.1010028116 -0.087598993 -0.018653528
U_I      0.004332217  0.043187603  0.0160187787  0.078824032  0.034378832
U_J     -0.004103362  0.032632440 -0.0060739980  0.006830321  0.036633495
U_K      0.023616154 -0.127259207 -0.0682513764 -0.002540686  0.010561615
RT_I    -0.008515559 -0.044479507  0.0112345829  0.056951610  0.029699061
RT_J     0.057556206  0.091133267 -0.0175208488 -0.105008932  0.037960483
RT_K    -0.030918637 -0.004848052  0.0330474490  0.024845987  0.017080748
SCR      0.008658187  0.038328491  0.0725531959  0.020425435  0.024003930
VEC1     0.046883547  0.021242087  0.0510345299 -0.033848134  0.110999418
VEC2    -0.085075636 -0.045096683  0.0339895223 -0.090035003 -0.009676167
                T2_K      ACOPY_x       ACOPY_y         U1_I          U_I
T1_I     0.002054312  0.013109049 -0.0170855796 -0.068558565  0.004332217
T1_J     0.086713761  0.016330592 -0.0042370844  0.017142377  0.043187603
T1_K     0.016531818  0.046221260 -0.0009775993  0.101002812  0.016018779
T2_I    -0.050224343  0.009040868  0.0538282672 -0.087598993  0.078824032
T2_J     0.027070643 -0.002943389 -0.0416306844 -0.018653528  0.034378832
T2_K     1.000000000 -0.091018518 -0.0087137657  0.000424280  0.005304139
ACOPY_x -0.091018518  1.000000000  0.0654597023  0.030717568  0.023171758
ACOPY_y -0.008713766  0.065459702  1.0000000000  0.078803092  0.035494909
U1_I     0.000424280  0.030717568  0.0788030923  1.000000000  0.038665882
U_I      0.005304139  0.023171758  0.0354949094  0.038665882  1.000000000
U_J      0.100563988 -0.016872191 -0.0046161946 -0.020426176 -0.292606367
U_K      0.008171650  0.028909821  0.0286892370  0.005840328 -0.219706859
RT_I    -0.013476108 -0.002836004 -0.0764394927 -0.014639233 -0.015032012
RT_J     0.098692314 -0.021914003  0.0123343255 -0.031368441 -0.005849138
RT_K    -0.067338544 -0.003630665  0.0069825098 -0.012467043  0.081149619
SCR     -0.002649926  0.053000383  0.0207925229 -0.035137684 -0.019490116
VEC1    -0.046762885 -0.008639758 -0.0131212011  0.067982487  0.076805127
VEC2    -0.003376119  0.030909800 -0.0006053727  0.071680111 -0.043518016
                 U_J           U_K         RT_I         RT_J         RT_K
T1_I    -0.004103362  2.361615e-02 -0.008515559  0.057556206 -0.030918637
T1_J     0.032632440 -1.272592e-01 -0.044479507  0.091133267 -0.004848052
T1_K    -0.006073998 -6.825138e-02  0.011234583 -0.017520849  0.033047449
T2_I     0.006830321 -2.540686e-03  0.056951610 -0.105008932  0.024845987
T2_J     0.036633495  1.056162e-02  0.029699061  0.037960483  0.017080748
T2_K     0.100563988  8.171650e-03 -0.013476108  0.098692314 -0.067338544
ACOPY_x -0.016872191  2.890982e-02 -0.002836004 -0.021914003 -0.003630665
ACOPY_y -0.004616195  2.868924e-02 -0.076439493  0.012334326  0.006982510
U1_I    -0.020426176  5.840328e-03 -0.014639233 -0.031368441 -0.012467043
U_I     -0.292606367 -2.197069e-01 -0.015032012 -0.005849138  0.081149619
U_J      1.000000000 -2.745701e-01  0.047827394  0.010542503 -0.063248540
U_K     -0.274570111  1.000000e+00  0.061326534 -0.048276847 -0.019497387
RT_I     0.047827394  6.132653e-02  1.000000000 -0.337055230 -0.345304203
RT_J     0.010542503 -4.827685e-02 -0.337055230  1.000000000 -0.308046210
RT_K    -0.063248540 -1.949739e-02 -0.345304203 -0.308046210  1.000000000
SCR     -0.015238750 -2.894366e-02  0.027106971 -0.010587606  0.062933691
VEC1     0.034160580  9.976062e-07 -0.009608646  0.015746058  0.054735115
VEC2     0.051155021 -2.685360e-02  0.037135169 -0.038672450 -0.037443249
                 SCR          VEC1          VEC2
T1_I     0.008658187  4.688355e-02 -0.0850756357
T1_J     0.038328491  2.124209e-02 -0.0450966831
T1_K     0.072553196  5.103453e-02  0.0339895223
T2_I     0.020425435 -3.384813e-02 -0.0900350035
T2_J     0.024003930  1.109994e-01 -0.0096761674
T2_K    -0.002649926 -4.676288e-02 -0.0033761192
ACOPY_x  0.053000383 -8.639758e-03  0.0309098002
ACOPY_y  0.020792523 -1.312120e-02 -0.0006053727
U1_I    -0.035137684  6.798249e-02  0.0716801108
U_I     -0.019490116  7.680513e-02 -0.0435180164
U_J     -0.015238750  3.416058e-02  0.0511550210
U_K     -0.028943656  9.976062e-07 -0.0268535978
RT_I     0.027106971 -9.608646e-03  0.0371351694
RT_J    -0.010587606  1.574606e-02 -0.0386724497
RT_K     0.062933691  5.473511e-02 -0.0374432489
SCR      1.000000000 -8.955800e-03 -0.0150425870
VEC1    -0.008955800  1.000000e+00  0.0129001773
VEC2    -0.015042587  1.290018e-02  1.0000000000

    T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
8      2    0    2    1    0    5       1       1   27   0  28  25    0    0
18     2    3    6    1    5    4       1       1   13  15   0  28    1    1
34     5    5    5    5    0    4       1       0    8   2   0   9    0    0
52     2    2    2    4    2    6       0       0   25   6  26   0    1    1
65     3    6    2    3    5    2       0       1   29  23  15   0    1    0
80     1    4    2    2    5    0       0       1   28  15   0   6    0    0
102    4    6    2    0    6    2       0       0   15  12   0   8    0    1
110    3    5    4    2    4    2       1       0   13   1   7   0    0    1
112    3    2    1    0    6    1       0       1   17  24   0  24    0    0
123    1    6    6    1    0    4       1       1   24   9   0   3    0    1
138    5    3    4    5    2    6       0       1   21   9   9   0    0    0
152    3    5    5    4    6    3       1       0   26  28  29   0    0    0
174    6    2    1    6    0    5       1       1    8  28  29   0    0    0
191    3    3    3    5    0    0       1       1   13  15   0   6    2    0
198    4    6    0    2    6    2       1       1   13   0  24   9    0    0
215    3    6    1    6    6    3       0       0   28   6   8   0    1    0
217    5    2    2    3    6    2       0       0   23  12   9   0    0    2
222    4    2    6    0    0    0       0       1   19  10  19   0    1    1
228    3    2    0    1    2    2       1       1   15   0   0   9    0    0
251    1    0    4    4    1    5       0       1   13   0  24  22    1    0
252    1    2    4    6    2    2       1       1   19  11   0   5    0    2
291    2    5    0    1    3    5       0       1   21   7  14   0    0    2
296    6    1    0    4    6    5       0       1   10   3  29   0    0    1
308    0    2    2    2    3    3       0       0    3  21   0  27    0    0
329    6    4    6    5    5    0       1       1    1   0  16   3    1    0
335    3    0    1    2    0    3       1       1   27   0  10  22    1    0
341    0    4    3    5    6    1       1       1   17  28   0   9    0    0
344    1    4    0    0    4    1       1       0    0   2  27   0    0    2
346    2    0    5    6    6    0       0       0   14  12   0  21    0    1
353    2    2    3    2    2    5       0       1    8   0  27   9    2    0
355    0    1    4    1    6    5       1       0   28   0   1   1    0    0
356    3    1    4    5    0    2       0       0    6   5  20   0    0    0
362    1    0    0    4    6    0       1       1    8  25   6   0    1    1
372    2    3    3    5    0    0       0       1    3   9   0  25    2    0
385    5    6    0    6    0    6       1       1    3  27   0   8    0    2
398    1    6    2    5    5    5       1       1   27   0  29  26    2    0
399    3    6    1    3    0    1       1       1   19   0   9  19    0    1
415    5    2    2    3    6    2       1       0    2   9  14   0    1    0
416    4    2    1    5    6    5       0       0   23   9  12   0    2    0
421    2    3    4    4    3    2       1       1    5  14   9   0    1    0
424    4    1    2    0    4    6       0       0   19  26   1   0    2    0
430    1    4    0    2    2    1       0       0    1   1   0  21    1    0
432    0    2    1    4    4    2       1       1    8   0  29  23    1    1
440    0    6    6    2    4    5       0       1   10  27  27   0    0    1
447    2    4    5    5    4    6       0       1    0   3   0  28    0    0
450    5    1    4    0    5    2       0       0   25  26   0   9    0    2
    RT_K SCR VEC1 VEC2
8      1   0    0    0
18     0   1    0    0
34     0   0    0    1
52     0   0    0    0
65     0   0    1    1
80     2   1    1    1
102    0   1    1    0
110    1   1    1    1
112    0   0    1    0
123    1   1    1    0
138    1   0    0    1
152    2   0    1    1
174    1   1    0    0
191    0   0    0    0
198    2   1    0    0
215    1   1    1    0
217    0   0    0    0
222    0   1    0    1
228    2   1    1    0
251    0   1    1    0
252    0   0    0    1
291    0   0    0    0
296    1   1    1    1
308    2   0    1    0
329    1   0    0    0
335    0   0    1    1
341    1   1    1    0
344    0   1    1    1
346    0   1    1    1
353    0   1    1    0
355    0   1    0    0
356    0   0    0    0
362    0   0    1    0
372    0   1    0    0
385    0   1    1    0
398    0   0    1    0
399    1   1    1    1
415    1   0    0    0
416    0   0    1    1
421    0   1    1    1
424    0   1    1    1
430    1   0    0    1
432    0   1    0    1
440    0   0    1    0
447    2   0    0    0
450    0   1    1    0

D-Efficiency Approximation: [1] 0.344

Measuring design of size 46
Current Design Names: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Initial Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Length of requested configs: 1
Code stats:
        Number of loops: 	12
        Max loop nest depth: 	6
        Additions: 		235
        Multiplications: 	76
        Divisions: 		0
        Logical: 		0
        Reads: 			542
        Writes: 		94
        Comparisons:		12
        Gotos: 			0
        
 building the original code:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -DORIGINAL -o __orio_perftest_original.exe __orio_perftest1.c timer_cpu.o -lm
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest1.exe __orio_perftest1.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest1.exe  
Program Test Output: 
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.869446}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.90038}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.869027}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870473}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.889924}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.867417}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.879649}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.876204}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.878297}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.87196}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870211}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.871585}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.868673}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870804}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.879297}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.889493}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870782}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.873898}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.866966}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.884647}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.877882}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.866538}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.867252}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.868424}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.873021}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.872649}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.884742}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.881412}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.872515}
{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.872425}

out:
 ["{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.869446}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.90038}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.869027}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870473}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.889924}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.867417}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.879649}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.876204}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.878297}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.87196}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870211}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.871585}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.868673}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870804}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.879297}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.889493}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.870782}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.873898}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.866966}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.884647}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.877882}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.866538}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.867252}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.868424}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.873021}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.872649}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.884742}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.881412}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.872515}", "{'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]' : 0.872425}"]
returning from 'run': {'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]': ([0.869446, 0.90038, 0.869027, 0.870473, 0.889924, 0.867417, 0.879649, 0.876204, 0.878297, 0.87196, 0.870211, 0.871585, 0.868673, 0.870804, 0.879297, 0.889493, 0.870782, 0.873898, 0.866966, 0.884647, 0.877882, 0.866538, 0.867252, 0.868424, 0.873021, 0.872649, 0.884742, 0.881412, 0.872515, 0.872425], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 0, 2, 1, 0, 5, 1, 1, 27, 0, 28, 25, 0, 0, 1, 0, 0, 0]': ([0.869446, 0.90038, 0.869027, 0.870473, 0.889924, 0.867417, 0.879649, 0.876204, 0.878297, 0.87196, 0.870211, 0.871585, 0.868673, 0.870804, 0.879297, 0.889493, 0.870782, 0.873898, 0.866966, 0.884647, 0.877882, 0.866538, 0.867252, 0.868424, 0.873021, 0.872649, 0.884742, 0.881412, 0.872515, 0.872425], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	22
        Max loop nest depth: 	6
        Additions: 		364
        Multiplications: 	96
        Divisions: 		0
        Logical: 		0
        Reads: 			702
        Writes: 		118
        Comparisons:		22
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest2.exe __orio_perftest2.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest2.exe  
Program Test Output: 
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402088}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406741}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.409208}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405287}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406111}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.404864}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405961}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402345}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402345}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405933}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.404526}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405517}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402155}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.403815}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.404153}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402095}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405916}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402228}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405877}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406534}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405987}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406158}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406096}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406574}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402051}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.401867}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405428}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.401918}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402023}
{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402129}

out:
 ["{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402088}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406741}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.409208}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405287}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406111}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.404864}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405961}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402345}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402345}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405933}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.404526}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405517}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402155}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.403815}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.404153}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402095}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405916}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402228}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405877}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406534}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405987}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406158}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406096}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.406574}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402051}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.401867}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.405428}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.401918}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402023}", "{'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]' : 0.402129}"]
returning from 'run': {'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]': ([0.402088, 0.406741, 0.409208, 0.405287, 0.406111, 0.404864, 0.405961, 0.402345, 0.402345, 0.405933, 0.404526, 0.405517, 0.402155, 0.403815, 0.404153, 0.402095, 0.405916, 0.402228, 0.405877, 0.406534, 0.405987, 0.406158, 0.406096, 0.406574, 0.402051, 0.401867, 0.405428, 0.401918, 0.402023, 0.402129], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[5, 5, 5, 5, 0, 4, 1, 0, 8, 2, 0, 9, 0, 0, 0, 0, 0, 1]': ([0.402088, 0.406741, 0.409208, 0.405287, 0.406111, 0.404864, 0.405961, 0.402345, 0.402345, 0.405933, 0.404526, 0.405517, 0.402155, 0.403815, 0.404153, 0.402095, 0.405916, 0.402228, 0.405877, 0.406534, 0.405987, 0.406158, 0.406096, 0.406574, 0.402051, 0.401867, 0.405428, 0.401918, 0.402023, 0.402129], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	43
        Max loop nest depth: 	6
        Additions: 		3928
        Multiplications: 	1184
        Divisions: 		0
        Logical: 		0
        Reads: 			6317
        Writes: 		714
        Comparisons:		43
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest3.exe __orio_perftest3.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest3.exe  
Program Test Output: 
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271088}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271696}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270617}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271242}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.27289}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271765}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270864}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270726}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270563}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.272556}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270848}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270552}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.27234}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.273729}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270338}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270582}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270597}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271126}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.27217}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271889}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271214}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270404}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.273305}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271291}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271813}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270686}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270628}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.272878}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271997}
{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270212}

out:
 ["{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271088}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271696}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270617}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271242}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.27289}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271765}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270864}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270726}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270563}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.272556}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270848}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270552}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.27234}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.273729}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270338}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270582}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270597}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271126}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.27217}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271889}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271214}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270404}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.273305}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271291}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271813}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270686}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270628}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.272878}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.271997}", "{'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]' : 0.270212}"]
returning from 'run': {'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]': ([0.271088, 0.271696, 0.270617, 0.271242, 0.27289, 0.271765, 0.270864, 0.270726, 0.270563, 0.272556, 0.270848, 0.270552, 0.27234, 0.273729, 0.270338, 0.270582, 0.270597, 0.271126, 0.27217, 0.271889, 0.271214, 0.270404, 0.273305, 0.271291, 0.271813, 0.270686, 0.270628, 0.272878, 0.271997, 0.270212], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 2, 2, 4, 2, 6, 0, 0, 25, 6, 26, 0, 1, 1, 0, 0, 0, 0]': ([0.271088, 0.271696, 0.270617, 0.271242, 0.27289, 0.271765, 0.270864, 0.270726, 0.270563, 0.272556, 0.270848, 0.270552, 0.27234, 0.273729, 0.270338, 0.270582, 0.270597, 0.271126, 0.27217, 0.271889, 0.271214, 0.270404, 0.273305, 0.271291, 0.271813, 0.270686, 0.270628, 0.272878, 0.271997, 0.270212], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	80
        Max loop nest depth: 	6
        Additions: 		4213
        Multiplications: 	1188
        Divisions: 		0
        Logical: 		0
        Reads: 			6970
        Writes: 		878
        Comparisons:		80
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest4.exe __orio_perftest4.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest4.exe  
Program Test Output: 
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258275}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257831}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258192}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257605}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.2578}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258213}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257646}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257279}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258011}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.260819}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.270277}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257742}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257935}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.260025}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.261693}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258589}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258963}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.26218}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.306711}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.265162}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.335095}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.259461}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.279472}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.286525}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.264755}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.266113}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.278778}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.291962}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258983}
{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.28947}

out:
 ["{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258275}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257831}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258192}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257605}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.2578}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258213}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257646}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257279}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258011}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.260819}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.270277}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257742}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.257935}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.260025}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.261693}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258589}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258963}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.26218}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.306711}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.265162}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.335095}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.259461}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.279472}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.286525}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.264755}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.266113}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.278778}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.291962}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.258983}", "{'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]' : 0.28947}"]
returning from 'run': {'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]': ([0.258275, 0.257831, 0.258192, 0.257605, 0.2578, 0.258213, 0.257646, 0.257279, 0.258011, 0.260819, 0.270277, 0.257742, 0.257935, 0.260025, 0.261693, 0.258589, 0.258963, 0.26218, 0.306711, 0.265162, 0.335095, 0.259461, 0.279472, 0.286525, 0.264755, 0.266113, 0.278778, 0.291962, 0.258983, 0.28947], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 6, 2, 3, 5, 2, 0, 1, 29, 23, 15, 0, 1, 0, 0, 0, 1, 1]': ([0.258275, 0.257831, 0.258192, 0.257605, 0.2578, 0.258213, 0.257646, 0.257279, 0.258011, 0.260819, 0.270277, 0.257742, 0.257935, 0.260025, 0.261693, 0.258589, 0.258963, 0.26218, 0.306711, 0.265162, 0.335095, 0.259461, 0.279472, 0.286525, 0.264755, 0.266113, 0.278778, 0.291962, 0.258983, 0.28947], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	50
        Max loop nest depth: 	6
        Additions: 		2646
        Multiplications: 	1122
        Divisions: 		0
        Logical: 		0
        Reads: 			5148
        Writes: 		912
        Comparisons:		50
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest5.exe __orio_perftest5.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest5.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest5.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest5.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest5.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	21
        Max loop nest depth: 	5
        Additions: 		1146
        Multiplications: 	532
        Divisions: 		0
        Logical: 		0
        Reads: 			2303
        Writes: 		419
        Comparisons:		21
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest6.exe __orio_perftest6.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest6.exe  
Program Test Output: 
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445908}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446903}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442627}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.451293}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446281}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446008}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445718}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446241}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446095}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445313}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.44245}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442821}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442626}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442609}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446634}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.451083}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447258}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446349}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.44841}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445182}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.448525}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445564}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447969}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445721}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447692}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447455}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.451897}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446153}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445859}
{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445941}

out:
 ["{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445908}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446903}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442627}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.451293}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446281}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446008}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445718}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446241}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446095}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445313}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.44245}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442821}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442626}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.442609}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446634}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.451083}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447258}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446349}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.44841}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445182}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.448525}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445564}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447969}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445721}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447692}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.447455}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.451897}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.446153}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445859}", "{'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]' : 0.445941}"]
returning from 'run': {'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]': ([0.445908, 0.446903, 0.442627, 0.451293, 0.446281, 0.446008, 0.445718, 0.446241, 0.446095, 0.445313, 0.44245, 0.442821, 0.442626, 0.442609, 0.446634, 0.451083, 0.447258, 0.446349, 0.44841, 0.445182, 0.448525, 0.445564, 0.447969, 0.445721, 0.447692, 0.447455, 0.451897, 0.446153, 0.445859, 0.445941], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[4, 6, 2, 0, 6, 2, 0, 0, 15, 12, 0, 8, 0, 1, 0, 1, 1, 0]': ([0.445908, 0.446903, 0.442627, 0.451293, 0.446281, 0.446008, 0.445718, 0.446241, 0.446095, 0.445313, 0.44245, 0.442821, 0.442626, 0.442609, 0.446634, 0.451083, 0.447258, 0.446349, 0.44841, 0.445182, 0.448525, 0.445564, 0.447969, 0.445721, 0.447692, 0.447455, 0.451897, 0.446153, 0.445859, 0.445941], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 128 must be greater than the stride value 128; tile index = kkk
Code stats:
        Number of loops: 	21
        Max loop nest depth: 	6
        Additions: 		310
        Multiplications: 	102
        Divisions: 		0
        Logical: 		0
        Reads: 			736
        Writes: 		173
        Comparisons:		21
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest7.exe __orio_perftest7.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest7.exe  
Program Test Output: 
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.400004}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397906}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.398077}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.398362}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397413}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39645}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397769}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39701}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397565}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396637}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39642}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.402859}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396933}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397511}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397722}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396497}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396565}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396875}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396532}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.399737}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396491}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396645}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396677}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397934}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.401719}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39652}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396568}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396703}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396616}
{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396976}

out:
 ["{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.400004}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397906}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.398077}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.398362}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397413}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39645}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397769}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39701}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397565}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396637}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39642}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.402859}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396933}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397511}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397722}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396497}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396565}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396875}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396532}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.399737}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396491}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396645}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396677}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.397934}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.401719}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.39652}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396568}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396703}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396616}", "{'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]' : 0.396976}"]
returning from 'run': {'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]': ([0.400004, 0.397906, 0.398077, 0.398362, 0.397413, 0.39645, 0.397769, 0.39701, 0.397565, 0.396637, 0.39642, 0.402859, 0.396933, 0.397511, 0.397722, 0.396497, 0.396565, 0.396875, 0.396532, 0.399737, 0.396491, 0.396645, 0.396677, 0.397934, 0.401719, 0.39652, 0.396568, 0.396703, 0.396616, 0.396976], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 5, 4, 2, 4, 2, 1, 0, 13, 1, 7, 0, 0, 1, 1, 1, 1, 1]': ([0.400004, 0.397906, 0.398077, 0.398362, 0.397413, 0.39645, 0.397769, 0.39701, 0.397565, 0.396637, 0.39642, 0.402859, 0.396933, 0.397511, 0.397722, 0.396497, 0.396565, 0.396875, 0.396532, 0.399737, 0.396491, 0.396645, 0.396677, 0.397934, 0.401719, 0.39652, 0.396568, 0.396703, 0.396616, 0.396976], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	119
        Max loop nest depth: 	5
        Additions: 		6664
        Multiplications: 	1404
        Divisions: 		0
        Logical: 		0
        Reads: 			9657
        Writes: 		1040
        Comparisons:		119
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest8.exe __orio_perftest8.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest8.exe  
Program Test Output: 
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.744982}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739323}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739416}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.791116}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.76544}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.783876}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.782853}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.838131}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.76289}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.759036}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.755888}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.742496}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.74268}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.742298}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.73822}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.744016}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739692}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.740929}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737494}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739502}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738669}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737577}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738286}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738635}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737925}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737329}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737937}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738542}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738116}
{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738087}

out:
 ["{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.744982}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739323}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739416}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.791116}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.76544}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.783876}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.782853}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.838131}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.76289}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.759036}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.755888}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.742496}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.74268}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.742298}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.73822}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.744016}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739692}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.740929}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737494}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.739502}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738669}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737577}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738286}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738635}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737925}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737329}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.737937}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738542}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738116}", "{'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]' : 0.738087}"]
returning from 'run': {'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]': ([0.744982, 0.739323, 0.739416, 0.791116, 0.76544, 0.783876, 0.782853, 0.838131, 0.76289, 0.759036, 0.755888, 0.742496, 0.74268, 0.742298, 0.73822, 0.744016, 0.739692, 0.740929, 0.737494, 0.739502, 0.738669, 0.737577, 0.738286, 0.738635, 0.737925, 0.737329, 0.737937, 0.738542, 0.738116, 0.738087], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 2, 1, 0, 6, 1, 0, 1, 17, 24, 0, 24, 0, 0, 0, 0, 1, 0]': ([0.744982, 0.739323, 0.739416, 0.791116, 0.76544, 0.783876, 0.782853, 0.838131, 0.76289, 0.759036, 0.755888, 0.742496, 0.74268, 0.742298, 0.73822, 0.744016, 0.739692, 0.740929, 0.737494, 0.739502, 0.738669, 0.737577, 0.738286, 0.738635, 0.737925, 0.737329, 0.737937, 0.738542, 0.738116, 0.738087], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 512 must be greater than the stride value 512; tile index = kkk
Code stats:
        Number of loops: 	47
        Max loop nest depth: 	5
        Additions: 		966
        Multiplications: 	352
        Divisions: 		0
        Logical: 		0
        Reads: 			2029
        Writes: 		405
        Comparisons:		47
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest9.exe __orio_perftest9.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest9.exe  
Program Test Output: 
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484322}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484895}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.483648}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484181}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.483668}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484484}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.48766}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486167}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486101}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486642}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486307}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486158}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486498}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485994}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485775}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485655}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.488558}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.483809}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485007}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484395}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484595}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484762}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484023}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484332}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484551}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485941}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.487532}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486862}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485879}
{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485974}

out:
 ["{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484322}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484895}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.483648}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484181}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.483668}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484484}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.48766}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486167}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486101}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486642}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486307}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486158}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486498}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485994}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485775}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485655}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.488558}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.483809}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485007}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484395}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484595}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484762}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484023}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484332}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.484551}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485941}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.487532}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.486862}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485879}", "{'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]' : 0.485974}"]
returning from 'run': {'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]': ([0.484322, 0.484895, 0.483648, 0.484181, 0.483668, 0.484484, 0.48766, 0.486167, 0.486101, 0.486642, 0.486307, 0.486158, 0.486498, 0.485994, 0.485775, 0.485655, 0.488558, 0.483809, 0.485007, 0.484395, 0.484595, 0.484762, 0.484023, 0.484332, 0.484551, 0.485941, 0.487532, 0.486862, 0.485879, 0.485974], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 6, 6, 1, 0, 4, 1, 1, 24, 9, 0, 3, 0, 1, 1, 1, 1, 0]': ([0.484322, 0.484895, 0.483648, 0.484181, 0.483668, 0.484484, 0.48766, 0.486167, 0.486101, 0.486642, 0.486307, 0.486158, 0.486498, 0.485994, 0.485775, 0.485655, 0.488558, 0.483809, 0.485007, 0.484395, 0.484595, 0.484762, 0.484023, 0.484332, 0.484551, 0.485941, 0.487532, 0.486862, 0.485879, 0.485974], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	42
        Max loop nest depth: 	6
        Additions: 		1670
        Multiplications: 	418
        Divisions: 		0
        Logical: 		0
        Reads: 			2754
        Writes: 		357
        Comparisons:		42
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest10.exe __orio_perftest10.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest10.exe  
Program Test Output: 
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371331}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371778}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370929}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370734}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371094}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371188}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370867}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370898}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370921}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.37101}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370954}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371314}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.37107}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371164}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371051}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370908}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371064}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371074}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370843}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371036}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371095}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370955}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371115}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371219}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.37106}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371054}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371061}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371321}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371048}
{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371086}

out:
 ["{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371331}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371778}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370929}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370734}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371094}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371188}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370867}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370898}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370921}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.37101}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370954}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371314}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.37107}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371164}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371051}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370908}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371064}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371074}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370843}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371036}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371095}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.370955}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371115}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371219}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.37106}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371054}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371061}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371321}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371048}", "{'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]' : 0.371086}"]
returning from 'run': {'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]': ([0.371331, 0.371778, 0.370929, 0.370734, 0.371094, 0.371188, 0.370867, 0.370898, 0.370921, 0.37101, 0.370954, 0.371314, 0.37107, 0.371164, 0.371051, 0.370908, 0.371064, 0.371074, 0.370843, 0.371036, 0.371095, 0.370955, 0.371115, 0.371219, 0.37106, 0.371054, 0.371061, 0.371321, 0.371048, 0.371086], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[5, 3, 4, 5, 2, 6, 0, 1, 21, 9, 9, 0, 0, 0, 1, 0, 0, 1]': ([0.371331, 0.371778, 0.370929, 0.370734, 0.371094, 0.371188, 0.370867, 0.370898, 0.370921, 0.37101, 0.370954, 0.371314, 0.37107, 0.371164, 0.371051, 0.370908, 0.371064, 0.371074, 0.370843, 0.371036, 0.371095, 0.370955, 0.371115, 0.371219, 0.37106, 0.371054, 0.371061, 0.371321, 0.371048, 0.371086], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	106
        Max loop nest depth: 	5
        Additions: 		4056
        Multiplications: 	882
        Divisions: 		0
        Logical: 		0
        Reads: 			6381
        Writes: 		740
        Comparisons:		106
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest11.exe __orio_perftest11.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest11.exe  
Program Test Output: 
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473354}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472385}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471732}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472209}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473589}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.47197}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471732}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471588}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471654}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.47237}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472498}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471696}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472526}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472569}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471739}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471707}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471921}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471885}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473448}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472403}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471811}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472503}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473113}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472191}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472238}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.474304}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.476078}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473162}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.47333}
{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473078}

out:
 ["{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473354}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472385}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471732}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472209}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473589}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.47197}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471732}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471588}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471654}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.47237}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472498}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471696}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472526}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472569}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471739}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471707}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471921}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471885}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473448}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472403}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.471811}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472503}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473113}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472191}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.472238}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.474304}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.476078}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473162}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.47333}", "{'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]' : 0.473078}"]
returning from 'run': {'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]': ([0.473354, 0.472385, 0.471732, 0.472209, 0.473589, 0.47197, 0.471732, 0.471588, 0.471654, 0.47237, 0.472498, 0.471696, 0.472526, 0.472569, 0.471739, 0.471707, 0.471921, 0.471885, 0.473448, 0.472403, 0.471811, 0.472503, 0.473113, 0.472191, 0.472238, 0.474304, 0.476078, 0.473162, 0.47333, 0.473078], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 3, 3, 5, 0, 0, 1, 1, 13, 15, 0, 6, 2, 0, 0, 0, 0, 0]': ([0.473354, 0.472385, 0.471732, 0.472209, 0.473589, 0.47197, 0.471732, 0.471588, 0.471654, 0.47237, 0.472498, 0.471696, 0.472526, 0.472569, 0.471739, 0.471707, 0.471921, 0.471885, 0.473448, 0.472403, 0.471811, 0.472503, 0.473113, 0.472191, 0.472238, 0.474304, 0.476078, 0.473162, 0.47333, 0.473078], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	31
        Max loop nest depth: 	6
        Additions: 		1346
        Multiplications: 	608
        Divisions: 		0
        Logical: 		0
        Reads: 			2748
        Writes: 		514
        Comparisons:		31
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest12.exe __orio_perftest12.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest12.exe  
Program Test Output: 
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320901}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320994}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.322066}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.321876}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.32084}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.325092}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320168}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320295}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320394}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320091}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320213}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320363}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320069}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320246}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320113}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.319983}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320122}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320359}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320409}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320258}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.327221}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.321436}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320132}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320224}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320141}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.3202}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320288}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320138}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320096}
{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320097}

out:
 ["{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320901}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320994}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.322066}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.321876}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.32084}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.325092}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320168}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320295}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320394}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320091}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320213}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320363}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320069}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320246}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320113}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.319983}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320122}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320359}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320409}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320258}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.327221}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.321436}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320132}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320224}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320141}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.3202}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320288}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320138}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320096}", "{'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]' : 0.320097}"]
returning from 'run': {'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]': ([0.320901, 0.320994, 0.322066, 0.321876, 0.32084, 0.325092, 0.320168, 0.320295, 0.320394, 0.320091, 0.320213, 0.320363, 0.320069, 0.320246, 0.320113, 0.319983, 0.320122, 0.320359, 0.320409, 0.320258, 0.327221, 0.321436, 0.320132, 0.320224, 0.320141, 0.3202, 0.320288, 0.320138, 0.320096, 0.320097], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 6, 1, 6, 6, 3, 0, 0, 28, 6, 8, 0, 1, 0, 1, 1, 1, 0]': ([0.320901, 0.320994, 0.322066, 0.321876, 0.32084, 0.325092, 0.320168, 0.320295, 0.320394, 0.320091, 0.320213, 0.320363, 0.320069, 0.320246, 0.320113, 0.319983, 0.320122, 0.320359, 0.320409, 0.320258, 0.327221, 0.321436, 0.320132, 0.320224, 0.320141, 0.3202, 0.320288, 0.320138, 0.320096, 0.320097], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 256 must be greater than the stride value 256; tile index = iii
Code stats:
        Number of loops: 	45
        Max loop nest depth: 	5
        Additions: 		4242
        Multiplications: 	1232
        Divisions: 		0
        Logical: 		0
        Reads: 			6601
        Writes: 		745
        Comparisons:		45
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest13.exe __orio_perftest13.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest13.exe  
Program Test Output: 
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491652}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491764}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491437}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491392}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.492147}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49252}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491281}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.492003}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.492456}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491432}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490654}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491637}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490528}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490287}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490282}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490752}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49126}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49078}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491324}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491544}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490625}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491164}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.48997}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490937}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49017}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490901}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49017}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490598}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491189}
{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491219}

out:
 ["{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491652}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491764}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491437}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491392}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.492147}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49252}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491281}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.492003}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.492456}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491432}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490654}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491637}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490528}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490287}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490282}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490752}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49126}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49078}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491324}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491544}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490625}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491164}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.48997}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490937}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49017}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490901}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.49017}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.490598}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491189}", "{'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]' : 0.491219}"]
returning from 'run': {'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]': ([0.491652, 0.491764, 0.491437, 0.491392, 0.492147, 0.49252, 0.491281, 0.492003, 0.492456, 0.491432, 0.490654, 0.491637, 0.490528, 0.490287, 0.490282, 0.490752, 0.49126, 0.49078, 0.491324, 0.491544, 0.490625, 0.491164, 0.48997, 0.490937, 0.49017, 0.490901, 0.49017, 0.490598, 0.491189, 0.491219], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[5, 2, 2, 3, 6, 2, 0, 0, 23, 12, 9, 0, 0, 2, 0, 0, 0, 0]': ([0.491652, 0.491764, 0.491437, 0.491392, 0.492147, 0.49252, 0.491281, 0.492003, 0.492456, 0.491432, 0.490654, 0.491637, 0.490528, 0.490287, 0.490282, 0.490752, 0.49126, 0.49078, 0.491324, 0.491544, 0.490625, 0.491164, 0.48997, 0.490937, 0.49017, 0.490901, 0.49017, 0.490598, 0.491189, 0.491219], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	70
        Max loop nest depth: 	4
        Additions: 		2931
        Multiplications: 	1200
        Divisions: 		0
        Logical: 		0
        Reads: 			5520
        Writes: 		928
        Comparisons:		70
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest14.exe __orio_perftest14.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest14.exe  
Program Test Output: 
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250314}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.251099}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249398}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.24972}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.2494}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249246}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249233}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250053}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.252007}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.260912}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.2493}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249058}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.256613}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249835}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249967}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249938}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249102}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248719}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248457}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248806}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249957}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250305}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248202}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250503}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248302}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249441}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249748}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248467}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248327}
{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250852}

out:
 ["{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250314}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.251099}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249398}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.24972}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.2494}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249246}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249233}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250053}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.252007}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.260912}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.2493}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249058}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.256613}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249835}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249967}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249938}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249102}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248719}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248457}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248806}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249957}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250305}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248202}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250503}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248302}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249441}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.249748}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248467}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.248327}", "{'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]' : 0.250852}"]
returning from 'run': {'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]': ([0.250314, 0.251099, 0.249398, 0.24972, 0.2494, 0.249246, 0.249233, 0.250053, 0.252007, 0.260912, 0.2493, 0.249058, 0.256613, 0.249835, 0.249967, 0.249938, 0.249102, 0.248719, 0.248457, 0.248806, 0.249957, 0.250305, 0.248202, 0.250503, 0.248302, 0.249441, 0.249748, 0.248467, 0.248327, 0.250852], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[4, 2, 6, 0, 0, 0, 0, 1, 19, 10, 19, 0, 1, 1, 0, 1, 0, 1]': ([0.250314, 0.251099, 0.249398, 0.24972, 0.2494, 0.249246, 0.249233, 0.250053, 0.252007, 0.260912, 0.2493, 0.249058, 0.256613, 0.249835, 0.249967, 0.249938, 0.249102, 0.248719, 0.248457, 0.248806, 0.249957, 0.250305, 0.248202, 0.250503, 0.248302, 0.249441, 0.249748, 0.248467, 0.248327, 0.250852], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 64 must be greater than the stride value 64; tile index = iii
Code stats:
        Number of loops: 	12
        Max loop nest depth: 	5
        Additions: 		277
        Multiplications: 	66
        Divisions: 		0
        Logical: 		0
        Reads: 			627
        Writes: 		147
        Comparisons:		12
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest15.exe __orio_perftest15.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest15.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest15.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest15.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest15.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Code stats:
        Number of loops: 	24
        Max loop nest depth: 	6
        Additions: 		2036
        Multiplications: 	900
        Divisions: 		0
        Logical: 		0
        Reads: 			3922
        Writes: 		662
        Comparisons:		24
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest16.exe __orio_perftest16.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest16.exe  
Program Test Output: 
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417824}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.419141}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.421635}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.429543}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.430444}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417681}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418337}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417557}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417621}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.41817}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417397}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418105}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417281}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417829}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417557}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417689}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418256}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.41754}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417589}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417632}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418047}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418923}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.419134}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418457}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418294}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.420034}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.419667}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418435}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418339}
{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418384}

out:
 ["{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417824}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.419141}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.421635}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.429543}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.430444}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417681}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418337}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417557}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417621}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.41817}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417397}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418105}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417281}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417829}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417557}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417689}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418256}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.41754}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417589}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.417632}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418047}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418923}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.419134}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418457}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418294}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.420034}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.419667}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418435}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418339}", "{'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]' : 0.418384}"]
returning from 'run': {'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]': ([0.417824, 0.419141, 0.421635, 0.429543, 0.430444, 0.417681, 0.418337, 0.417557, 0.417621, 0.41817, 0.417397, 0.418105, 0.417281, 0.417829, 0.417557, 0.417689, 0.418256, 0.41754, 0.417589, 0.417632, 0.418047, 0.418923, 0.419134, 0.418457, 0.418294, 0.420034, 0.419667, 0.418435, 0.418339, 0.418384], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 0, 4, 4, 1, 5, 0, 1, 13, 0, 24, 22, 1, 0, 0, 1, 1, 0]': ([0.417824, 0.419141, 0.421635, 0.429543, 0.430444, 0.417681, 0.418337, 0.417557, 0.417621, 0.41817, 0.417397, 0.418105, 0.417281, 0.417829, 0.417557, 0.417689, 0.418256, 0.41754, 0.417589, 0.417632, 0.418047, 0.418923, 0.419134, 0.418457, 0.418294, 0.420034, 0.419667, 0.418435, 0.418339, 0.418384], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 128 must be greater than the stride value 128; tile index = kkk
Code stats:
        Number of loops: 	79
        Max loop nest depth: 	6
        Additions: 		4267
        Multiplications: 	1014
        Divisions: 		0
        Logical: 		0
        Reads: 			6610
        Writes: 		779
        Comparisons:		79
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest17.exe __orio_perftest17.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest17.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest17.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest17.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest17.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 256 must be greater than the stride value 256; tile index = jjj
Code stats:
        Number of loops: 	50
        Max loop nest depth: 	5
        Additions: 		3026
        Multiplications: 	882
        Divisions: 		0
        Logical: 		0
        Reads: 			4960
        Writes: 		591
        Comparisons:		50
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest18.exe __orio_perftest18.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest18.exe  
Program Test Output: 
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421423}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.424213}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422021}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42072}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42068}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420707}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422069}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421089}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422139}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420792}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.423421}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42191}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42151}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.425013}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.424973}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.4217}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420937}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.424044}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421135}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42176}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420738}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421015}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422131}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420264}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421355}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42197}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421229}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422119}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.419923}
{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420667}

out:
 ["{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421423}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.424213}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422021}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42072}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42068}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420707}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422069}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421089}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422139}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420792}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.423421}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42191}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42151}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.425013}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.424973}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.4217}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420937}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.424044}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421135}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42176}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420738}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421015}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422131}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420264}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421355}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.42197}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.421229}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.422119}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.419923}", "{'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]' : 0.420667}"]
returning from 'run': {'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]': ([0.421423, 0.424213, 0.422021, 0.42072, 0.42068, 0.420707, 0.422069, 0.421089, 0.422139, 0.420792, 0.423421, 0.42191, 0.42151, 0.425013, 0.424973, 0.4217, 0.420937, 0.424044, 0.421135, 0.42176, 0.420738, 0.421015, 0.422131, 0.420264, 0.421355, 0.42197, 0.421229, 0.422119, 0.419923, 0.420667], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 5, 0, 1, 3, 5, 0, 1, 21, 7, 14, 0, 0, 2, 0, 0, 0, 0]': ([0.421423, 0.424213, 0.422021, 0.42072, 0.42068, 0.420707, 0.422069, 0.421089, 0.422139, 0.420792, 0.423421, 0.42191, 0.42151, 0.425013, 0.424973, 0.4217, 0.420937, 0.424044, 0.421135, 0.42176, 0.420738, 0.421015, 0.422131, 0.420264, 0.421355, 0.42197, 0.421229, 0.422119, 0.419923, 0.420667], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 512 must be greater than the stride value 512; tile index = iii
Code stats:
        Number of loops: 	35
        Max loop nest depth: 	5
        Additions: 		1236
        Multiplications: 	470
        Divisions: 		0
        Logical: 		0
        Reads: 			2370
        Writes: 		404
        Comparisons:		35
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest19.exe __orio_perftest19.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest19.exe  
Program Test Output: 
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.35144}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.349417}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347692}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348343}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348363}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348862}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.351225}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.35097}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347923}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347586}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.349601}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.349521}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.34828}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.354102}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.350593}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.350833}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.355726}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.351083}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.350558}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.353365}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348235}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.353156}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347314}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.351249}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.354566}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.34763}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347852}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.353177}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348183}
{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347719}

out:
 ["{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.35144}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.349417}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347692}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348343}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348363}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348862}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.351225}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.35097}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347923}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347586}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.349601}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.349521}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.34828}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.354102}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.350593}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.350833}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.355726}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.351083}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.350558}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.353365}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348235}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.353156}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347314}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.351249}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.354566}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.34763}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347852}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.353177}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.348183}", "{'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]' : 0.347719}"]
returning from 'run': {'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]': ([0.35144, 0.349417, 0.347692, 0.348343, 0.348363, 0.348862, 0.351225, 0.35097, 0.347923, 0.347586, 0.349601, 0.349521, 0.34828, 0.354102, 0.350593, 0.350833, 0.355726, 0.351083, 0.350558, 0.353365, 0.348235, 0.353156, 0.347314, 0.351249, 0.354566, 0.34763, 0.347852, 0.353177, 0.348183, 0.347719], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[6, 1, 0, 4, 6, 5, 0, 1, 10, 3, 29, 0, 0, 1, 1, 1, 1, 1]': ([0.35144, 0.349417, 0.347692, 0.348343, 0.348363, 0.348862, 0.351225, 0.35097, 0.347923, 0.347586, 0.349601, 0.349521, 0.34828, 0.354102, 0.350593, 0.350833, 0.355726, 0.351083, 0.350558, 0.353365, 0.348235, 0.353156, 0.347314, 0.351249, 0.354566, 0.34763, 0.347852, 0.353177, 0.348183, 0.347719], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	22
        Max loop nest depth: 	6
        Additions: 		2560
        Multiplications: 	648
        Divisions: 		0
        Logical: 		0
        Reads: 			3934
        Writes: 		418
        Comparisons:		22
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest20.exe __orio_perftest20.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest20.exe  
Program Test Output: 
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.343162}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342783}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.344079}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.344546}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.343313}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342263}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342065}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342638}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342279}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.341898}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34279}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342237}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342409}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34184}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.341846}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342101}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.346879}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342068}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.344117}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.348059}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342474}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.341781}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34247}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342031}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342377}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342593}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342876}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342595}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34321}
{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342894}

out:
 ["{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.343162}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342783}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.344079}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.344546}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.343313}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342263}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342065}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342638}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342279}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.341898}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34279}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342237}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342409}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34184}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.341846}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342101}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.346879}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342068}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.344117}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.348059}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342474}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.341781}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34247}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342031}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342377}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342593}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342876}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342595}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.34321}", "{'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]' : 0.342894}"]
returning from 'run': {'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]': ([0.343162, 0.342783, 0.344079, 0.344546, 0.343313, 0.342263, 0.342065, 0.342638, 0.342279, 0.341898, 0.34279, 0.342237, 0.342409, 0.34184, 0.341846, 0.342101, 0.346879, 0.342068, 0.344117, 0.348059, 0.342474, 0.341781, 0.34247, 0.342031, 0.342377, 0.342593, 0.342876, 0.342595, 0.34321, 0.342894], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 0, 1, 2, 0, 3, 1, 1, 27, 0, 10, 22, 1, 0, 0, 0, 1, 1]': ([0.343162, 0.342783, 0.344079, 0.344546, 0.343313, 0.342263, 0.342065, 0.342638, 0.342279, 0.341898, 0.34279, 0.342237, 0.342409, 0.34184, 0.341846, 0.342101, 0.346879, 0.342068, 0.344117, 0.348059, 0.342474, 0.341781, 0.34247, 0.342031, 0.342377, 0.342593, 0.342876, 0.342595, 0.34321, 0.342894], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 64 must be greater than the stride value 64; tile index = kkk
Code stats:
        Number of loops: 	105
        Max loop nest depth: 	5
        Additions: 		1550
        Multiplications: 	540
        Divisions: 		0
        Logical: 		0
        Reads: 			3455
        Writes: 		715
        Comparisons:		105
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest21.exe __orio_perftest21.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest21.exe  
Program Test Output: 
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442941}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443362}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442394}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442758}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443238}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442704}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442506}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.449012}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442782}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442699}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442559}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442664}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.44256}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442193}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442339}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442436}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442237}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442293}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.44783}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440266}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440409}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440535}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441274}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440596}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441142}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443131}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441466}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441212}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443059}
{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.447823}

out:
 ["{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442941}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443362}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442394}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442758}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443238}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442704}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442506}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.449012}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442782}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442699}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442559}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442664}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.44256}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442193}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442339}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442436}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442237}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.442293}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.44783}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440266}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440409}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440535}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441274}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.440596}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441142}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443131}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441466}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.441212}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.443059}", "{'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]' : 0.447823}"]
returning from 'run': {'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]': ([0.442941, 0.443362, 0.442394, 0.442758, 0.443238, 0.442704, 0.442506, 0.449012, 0.442782, 0.442699, 0.442559, 0.442664, 0.44256, 0.442193, 0.442339, 0.442436, 0.442237, 0.442293, 0.44783, 0.440266, 0.440409, 0.440535, 0.441274, 0.440596, 0.441142, 0.443131, 0.441466, 0.441212, 0.443059, 0.447823], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 4, 3, 5, 6, 1, 1, 1, 17, 28, 0, 9, 0, 0, 1, 1, 1, 0]': ([0.442941, 0.443362, 0.442394, 0.442758, 0.443238, 0.442704, 0.442506, 0.449012, 0.442782, 0.442699, 0.442559, 0.442664, 0.44256, 0.442193, 0.442339, 0.442436, 0.442237, 0.442293, 0.44783, 0.440266, 0.440409, 0.440535, 0.441274, 0.440596, 0.441142, 0.443131, 0.441466, 0.441212, 0.443059, 0.447823], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	18
        Max loop nest depth: 	5
        Additions: 		1890
        Multiplications: 	896
        Divisions: 		0
        Logical: 		0
        Reads: 			3730
        Writes: 		656
        Comparisons:		18
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest22.exe __orio_perftest22.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest22.exe  
Program Test Output: 
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295104}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295879}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295084}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295144}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295748}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.297028}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296501}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296575}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296577}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296515}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295661}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296741}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295864}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296915}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295827}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.29675}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296656}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295364}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296845}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295884}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295972}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296629}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.297246}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296739}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295293}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295146}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296924}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296513}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296332}
{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295281}

out:
 ["{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295104}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295879}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295084}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295144}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295748}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.297028}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296501}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296575}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296577}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296515}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295661}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296741}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295864}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296915}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295827}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.29675}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296656}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295364}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296845}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295884}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295972}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296629}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.297246}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296739}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295293}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295146}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296924}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296513}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.296332}", "{'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]' : 0.295281}"]
returning from 'run': {'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]': ([0.295104, 0.295879, 0.295084, 0.295144, 0.295748, 0.297028, 0.296501, 0.296575, 0.296577, 0.296515, 0.295661, 0.296741, 0.295864, 0.296915, 0.295827, 0.29675, 0.296656, 0.295364, 0.296845, 0.295884, 0.295972, 0.296629, 0.297246, 0.296739, 0.295293, 0.295146, 0.296924, 0.296513, 0.296332, 0.295281], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 0, 5, 6, 6, 0, 0, 0, 14, 12, 0, 21, 0, 1, 0, 1, 1, 1]': ([0.295104, 0.295879, 0.295084, 0.295144, 0.295748, 0.297028, 0.296501, 0.296575, 0.296577, 0.296515, 0.295661, 0.296741, 0.295864, 0.296915, 0.295827, 0.29675, 0.296656, 0.295364, 0.296845, 0.295884, 0.295972, 0.296629, 0.297246, 0.296739, 0.295293, 0.295146, 0.296924, 0.296513, 0.296332, 0.295281], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 128 must be greater than the stride value 128; tile index = kkk
Code stats:
        Number of loops: 	16
        Max loop nest depth: 	5
        Additions: 		1027
        Multiplications: 	322
        Divisions: 		0
        Logical: 		0
        Reads: 			1752
        Writes: 		208
        Comparisons:		16
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest23.exe __orio_perftest23.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest23.exe  
Program Test Output: 
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261573}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262178}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261314}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262403}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262488}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261629}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261945}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262004}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261979}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261678}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261894}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262606}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261702}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261524}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.260976}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262206}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261965}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262132}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261945}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261981}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261912}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261936}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.26208}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261701}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261338}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262434}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262278}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262155}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261362}
{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261441}

out:
 ["{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261573}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262178}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261314}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262403}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262488}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261629}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261945}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262004}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261979}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261678}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261894}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262606}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261702}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261524}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.260976}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262206}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261965}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262132}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261945}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261981}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261912}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261936}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.26208}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261701}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261338}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262434}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262278}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.262155}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261362}", "{'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]' : 0.261441}"]
returning from 'run': {'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]': ([0.261573, 0.262178, 0.261314, 0.262403, 0.262488, 0.261629, 0.261945, 0.262004, 0.261979, 0.261678, 0.261894, 0.262606, 0.261702, 0.261524, 0.260976, 0.262206, 0.261965, 0.262132, 0.261945, 0.261981, 0.261912, 0.261936, 0.26208, 0.261701, 0.261338, 0.262434, 0.262278, 0.262155, 0.261362, 0.261441], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 1, 4, 5, 0, 2, 0, 0, 6, 5, 20, 0, 0, 0, 0, 0, 0, 0]': ([0.261573, 0.262178, 0.261314, 0.262403, 0.262488, 0.261629, 0.261945, 0.262004, 0.261979, 0.261678, 0.261894, 0.262606, 0.261702, 0.261524, 0.260976, 0.262206, 0.261965, 0.262132, 0.261945, 0.261981, 0.261912, 0.261936, 0.26208, 0.261701, 0.261338, 0.262434, 0.262278, 0.262155, 0.261362, 0.261441], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	44
        Max loop nest depth: 	5
        Additions: 		2433
        Multiplications: 	630
        Divisions: 		0
        Logical: 		0
        Reads: 			3948
        Writes: 		472
        Comparisons:		44
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest24.exe __orio_perftest24.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest24.exe  
Program Test Output: 
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257405}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258081}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258527}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257226}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.260124}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258711}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257199}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257926}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256119}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256682}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257357}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257427}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257014}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256832}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256936}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257878}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256776}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256359}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257399}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258752}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257936}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257367}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256952}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.260394}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257598}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257508}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257858}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258523}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258087}
{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258515}

out:
 ["{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257405}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258081}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258527}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257226}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.260124}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258711}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257199}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257926}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256119}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256682}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257357}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257427}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257014}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256832}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256936}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257878}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256776}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256359}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257399}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258752}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257936}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257367}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.256952}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.260394}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257598}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257508}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.257858}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258523}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258087}", "{'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]' : 0.258515}"]
returning from 'run': {'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]': ([0.257405, 0.258081, 0.258527, 0.257226, 0.260124, 0.258711, 0.257199, 0.257926, 0.256119, 0.256682, 0.257357, 0.257427, 0.257014, 0.256832, 0.256936, 0.257878, 0.256776, 0.256359, 0.257399, 0.258752, 0.257936, 0.257367, 0.256952, 0.260394, 0.257598, 0.257508, 0.257858, 0.258523, 0.258087, 0.258515], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 0, 0, 4, 6, 0, 1, 1, 8, 25, 6, 0, 1, 1, 0, 0, 1, 0]': ([0.257405, 0.258081, 0.258527, 0.257226, 0.260124, 0.258711, 0.257199, 0.257926, 0.256119, 0.256682, 0.257357, 0.257427, 0.257014, 0.256832, 0.256936, 0.257878, 0.256776, 0.256359, 0.257399, 0.258752, 0.257936, 0.257367, 0.256952, 0.260394, 0.257598, 0.257508, 0.257858, 0.258523, 0.258087, 0.258515], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	64
        Max loop nest depth: 	5
        Additions: 		6275
        Multiplications: 	2408
        Divisions: 		0
        Logical: 		0
        Reads: 			11911
        Writes: 		2109
        Comparisons:		64
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest25.exe __orio_perftest25.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest25.exe  
Program Test Output: 
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.361171}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.349485}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.325052}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.32121}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.323441}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.340515}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.338901}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.462334}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.429317}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.456944}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.363715}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.427811}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.453665}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.49779}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.412082}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.378142}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.409431}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.330996}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.418811}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.434992}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.456276}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.389728}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.459879}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.405331}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.391561}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.358364}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.408958}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.367432}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.375049}
{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.396077}

out:
 ["{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.361171}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.349485}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.325052}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.32121}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.323441}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.340515}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.338901}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.462334}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.429317}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.456944}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.363715}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.427811}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.453665}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.49779}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.412082}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.378142}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.409431}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.330996}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.418811}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.434992}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.456276}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.389728}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.459879}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.405331}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.391561}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.358364}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.408958}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.367432}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.375049}", "{'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]' : 0.396077}"]
returning from 'run': {'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]': ([0.361171, 0.349485, 0.325052, 0.32121, 0.323441, 0.340515, 0.338901, 0.462334, 0.429317, 0.456944, 0.363715, 0.427811, 0.453665, 0.49779, 0.412082, 0.378142, 0.409431, 0.330996, 0.418811, 0.434992, 0.456276, 0.389728, 0.459879, 0.405331, 0.391561, 0.358364, 0.408958, 0.367432, 0.375049, 0.396077], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 3, 3, 5, 0, 0, 0, 1, 3, 9, 0, 25, 2, 0, 0, 1, 0, 0]': ([0.361171, 0.349485, 0.325052, 0.32121, 0.323441, 0.340515, 0.338901, 0.462334, 0.429317, 0.456944, 0.363715, 0.427811, 0.453665, 0.49779, 0.412082, 0.378142, 0.409431, 0.330996, 0.418811, 0.434992, 0.456276, 0.389728, 0.459879, 0.405331, 0.391561, 0.358364, 0.408958, 0.367432, 0.375049, 0.396077], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	28
        Max loop nest depth: 	6
        Additions: 		16026
        Multiplications: 	3894
        Divisions: 		0
        Logical: 		0
        Reads: 			22639
        Writes: 		2043
        Comparisons:		28
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest26.exe __orio_perftest26.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest26.exe  
Program Test Output: 
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.944376}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.925951}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.956314}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.93126}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.926752}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.902545}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.921746}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.924708}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 1.01017}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.959794}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.931914}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.987403}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.906822}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.913103}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.916212}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.915612}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.922331}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.931348}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.922131}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.914467}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.919611}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.920327}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.924832}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.92436}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.91835}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.911664}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.924598}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.929771}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.90764}
{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.919284}

out:
 ["{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.944376}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.925951}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.956314}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.93126}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.926752}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.902545}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.921746}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.924708}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 1.01017}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.959794}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.931914}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.987403}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.906822}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.913103}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.916212}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.915612}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.922331}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.931348}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.922131}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.914467}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.919611}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.920327}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.924832}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.92436}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.91835}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.911664}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.924598}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.929771}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.90764}", "{'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]' : 0.919284}"]
returning from 'run': {'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]': ([0.944376, 0.925951, 0.956314, 0.93126, 0.926752, 0.902545, 0.921746, 0.924708, 1.01017, 0.959794, 0.931914, 0.987403, 0.906822, 0.913103, 0.916212, 0.915612, 0.922331, 0.931348, 0.922131, 0.914467, 0.919611, 0.920327, 0.924832, 0.92436, 0.91835, 0.911664, 0.924598, 0.929771, 0.90764, 0.919284], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 6, 2, 5, 5, 5, 1, 1, 27, 0, 29, 26, 2, 0, 0, 0, 1, 0]': ([0.944376, 0.925951, 0.956314, 0.93126, 0.926752, 0.902545, 0.921746, 0.924708, 1.01017, 0.959794, 0.931914, 0.987403, 0.906822, 0.913103, 0.916212, 0.915612, 0.922331, 0.931348, 0.922131, 0.914467, 0.919611, 0.920327, 0.924832, 0.92436, 0.91835, 0.911664, 0.924598, 0.929771, 0.90764, 0.919284], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	13
        Max loop nest depth: 	6
        Additions: 		152
        Multiplications: 	32
        Divisions: 		0
        Logical: 		0
        Reads: 			349
        Writes: 		90
        Comparisons:		13
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest27.exe __orio_perftest27.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest27.exe  
Program Test Output: 
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.10678}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08644}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.10335}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07933}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.10009}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08803}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09808}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09782}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08845}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09421}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07644}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09113}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.06685}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08042}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.06241}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.06649}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.0861}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07842}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07522}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08177}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09233}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08331}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08953}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08915}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08241}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08335}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07436}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08188}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08865}
{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.05944}

out:
 ["{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.10678}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08644}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.10335}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07933}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.10009}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08803}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09808}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09782}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08845}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09421}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07644}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09113}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.06685}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08042}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.06241}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.06649}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.0861}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07842}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07522}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08177}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.09233}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08331}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08953}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08915}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08241}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08335}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.07436}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08188}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.08865}", "{'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]' : 1.05944}"]
returning from 'run': {'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]': ([1.10678, 1.08644, 1.10335, 1.07933, 1.10009, 1.08803, 1.09808, 1.09782, 1.08845, 1.09421, 1.07644, 1.09113, 1.06685, 1.08042, 1.06241, 1.06649, 1.0861, 1.07842, 1.07522, 1.08177, 1.09233, 1.08331, 1.08953, 1.08915, 1.08241, 1.08335, 1.07436, 1.08188, 1.08865, 1.05944], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[3, 6, 1, 3, 0, 1, 1, 1, 19, 0, 9, 19, 0, 1, 1, 1, 1, 1]': ([1.10678, 1.08644, 1.10335, 1.07933, 1.10009, 1.08803, 1.09808, 1.09782, 1.08845, 1.09421, 1.07644, 1.09113, 1.06685, 1.08042, 1.06241, 1.06649, 1.0861, 1.07842, 1.07522, 1.08177, 1.09233, 1.08331, 1.08953, 1.08915, 1.08241, 1.08335, 1.07436, 1.08188, 1.08865, 1.05944], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 256 must be greater than the stride value 256; tile index = iii
Code stats:
        Number of loops: 	60
        Max loop nest depth: 	5
        Additions: 		3572
        Multiplications: 	950
        Divisions: 		0
        Logical: 		0
        Reads: 			5602
        Writes: 		623
        Comparisons:		60
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest28.exe __orio_perftest28.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest28.exe  
Program Test Output: 
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361567}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.370454}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.371962}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.363366}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361292}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361364}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360862}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.36112}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360602}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.425041}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.431158}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361136}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.362077}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361379}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361337}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361451}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361501}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361414}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361354}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361127}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361569}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361036}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361355}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361293}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361058}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360289}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361328}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.362647}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360886}
{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361009}

out:
 ["{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361567}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.370454}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.371962}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.363366}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361292}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361364}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360862}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.36112}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360602}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.425041}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.431158}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361136}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.362077}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361379}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361337}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361451}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361501}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361414}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361354}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361127}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361569}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361036}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361355}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361293}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361058}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360289}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361328}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.362647}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.360886}", "{'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]' : 0.361009}"]
returning from 'run': {'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]': ([0.361567, 0.370454, 0.371962, 0.363366, 0.361292, 0.361364, 0.360862, 0.36112, 0.360602, 0.425041, 0.431158, 0.361136, 0.362077, 0.361379, 0.361337, 0.361451, 0.361501, 0.361414, 0.361354, 0.361127, 0.361569, 0.361036, 0.361355, 0.361293, 0.361058, 0.360289, 0.361328, 0.362647, 0.360886, 0.361009], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[5, 2, 2, 3, 6, 2, 1, 0, 2, 9, 14, 0, 1, 0, 1, 0, 0, 0]': ([0.361567, 0.370454, 0.371962, 0.363366, 0.361292, 0.361364, 0.360862, 0.36112, 0.360602, 0.425041, 0.431158, 0.361136, 0.362077, 0.361379, 0.361337, 0.361451, 0.361501, 0.361414, 0.361354, 0.361127, 0.361569, 0.361036, 0.361355, 0.361293, 0.361058, 0.360289, 0.361328, 0.362647, 0.360886, 0.361009], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 128 must be greater than the stride value 128; tile index = kkk
Code stats:
        Number of loops: 	104
        Max loop nest depth: 	6
        Additions: 		1975
        Multiplications: 	576
        Divisions: 		0
        Logical: 		0
        Reads: 			3764
        Writes: 		693
        Comparisons:		104
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest29.exe __orio_perftest29.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest29.exe  
Program Test Output: 
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232787}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232601}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231951}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.235069}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.234127}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232364}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232205}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231988}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.233516}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232414}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232949}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232188}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232561}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232614}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232245}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.234055}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232738}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.23526}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.233031}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.233812}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232955}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232594}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231995}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232086}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231992}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232247}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231724}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231696}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232256}
{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231985}

out:
 ["{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232787}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232601}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231951}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.235069}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.234127}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232364}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232205}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231988}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.233516}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232414}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232949}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232188}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232561}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232614}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232245}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.234055}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232738}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.23526}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.233031}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.233812}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232955}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232594}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231995}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232086}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231992}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232247}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231724}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231696}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.232256}", "{'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]' : 0.231985}"]
returning from 'run': {'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]': ([0.232787, 0.232601, 0.231951, 0.235069, 0.234127, 0.232364, 0.232205, 0.231988, 0.233516, 0.232414, 0.232949, 0.232188, 0.232561, 0.232614, 0.232245, 0.234055, 0.232738, 0.23526, 0.233031, 0.233812, 0.232955, 0.232594, 0.231995, 0.232086, 0.231992, 0.232247, 0.231724, 0.231696, 0.232256, 0.231985], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[2, 3, 4, 4, 3, 2, 1, 1, 5, 14, 9, 0, 1, 0, 0, 1, 1, 1]': ([0.232787, 0.232601, 0.231951, 0.235069, 0.234127, 0.232364, 0.232205, 0.231988, 0.233516, 0.232414, 0.232949, 0.232188, 0.232561, 0.232614, 0.232245, 0.234055, 0.232738, 0.23526, 0.233031, 0.233812, 0.232955, 0.232594, 0.231995, 0.232086, 0.231992, 0.232247, 0.231724, 0.231696, 0.232256, 0.231985], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	27
        Max loop nest depth: 	5
        Additions: 		1020
        Multiplications: 	480
        Divisions: 		0
        Logical: 		0
        Reads: 			2369
        Writes: 		491
        Comparisons:		27
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest30.exe __orio_perftest30.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest30.exe  
Program Test Output: 
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.464031}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.464285}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463789}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.462731}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466114}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467008}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466732}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468191}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468399}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466932}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.46723}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467091}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468147}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468239}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.46696}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467104}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463327}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.465034}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.462966}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468888}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.464453}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.462938}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.46445}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463337}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463628}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463261}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.480161}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466548}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467746}
{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467002}

out:
 ["{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.464031}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.464285}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463789}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.462731}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466114}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467008}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466732}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468191}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468399}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466932}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.46723}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467091}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468147}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468239}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.46696}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467104}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463327}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.465034}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.462966}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.468888}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.464453}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.462938}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.46445}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463337}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463628}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.463261}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.480161}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.466548}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467746}", "{'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]' : 0.467002}"]
returning from 'run': {'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]': ([0.464031, 0.464285, 0.463789, 0.462731, 0.466114, 0.467008, 0.466732, 0.468191, 0.468399, 0.466932, 0.46723, 0.467091, 0.468147, 0.468239, 0.46696, 0.467104, 0.463327, 0.465034, 0.462966, 0.468888, 0.464453, 0.462938, 0.46445, 0.463337, 0.463628, 0.463261, 0.480161, 0.466548, 0.467746, 0.467002], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[4, 1, 2, 0, 4, 6, 0, 0, 19, 26, 1, 0, 2, 0, 0, 1, 1, 1]': ([0.464031, 0.464285, 0.463789, 0.462731, 0.466114, 0.467008, 0.466732, 0.468191, 0.468399, 0.466932, 0.46723, 0.467091, 0.468147, 0.468239, 0.46696, 0.467104, 0.463327, 0.465034, 0.462966, 0.468888, 0.464453, 0.462938, 0.46445, 0.463337, 0.463628, 0.463261, 0.480161, 0.466548, 0.467746, 0.467002], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 128 must be greater than the stride value 128; tile index = jjj
Code stats:
        Number of loops: 	27
        Max loop nest depth: 	5
        Additions: 		2279
        Multiplications: 	704
        Divisions: 		0
        Logical: 		0
        Reads: 			3763
        Writes: 		431
        Comparisons:		27
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest31.exe __orio_perftest31.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest31.exe  
Program Test Output: 
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273657}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272126}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272321}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.278548}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271858}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272075}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272867}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273748}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271281}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.27134}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272586}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272332}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272634}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271477}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272746}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273477}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272623}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272386}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273713}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272427}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273964}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.28034}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271514}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.274971}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273879}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.275163}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273386}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.288524}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.288455}
{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.275962}

out:
 ["{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273657}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272126}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272321}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.278548}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271858}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272075}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272867}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273748}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271281}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.27134}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272586}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272332}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272634}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271477}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272746}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273477}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272623}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272386}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273713}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.272427}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273964}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.28034}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.271514}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.274971}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273879}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.275163}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.273386}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.288524}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.288455}", "{'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]' : 0.275962}"]
returning from 'run': {'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]': ([0.273657, 0.272126, 0.272321, 0.278548, 0.271858, 0.272075, 0.272867, 0.273748, 0.271281, 0.27134, 0.272586, 0.272332, 0.272634, 0.271477, 0.272746, 0.273477, 0.272623, 0.272386, 0.273713, 0.272427, 0.273964, 0.28034, 0.271514, 0.274971, 0.273879, 0.275163, 0.273386, 0.288524, 0.288455, 0.275962], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[1, 4, 0, 2, 2, 1, 0, 0, 1, 1, 0, 21, 1, 0, 1, 0, 0, 1]': ([0.273657, 0.272126, 0.272321, 0.278548, 0.271858, 0.272075, 0.272867, 0.273748, 0.271281, 0.27134, 0.272586, 0.272332, 0.272634, 0.271477, 0.272746, 0.273477, 0.272623, 0.272386, 0.273713, 0.272427, 0.273964, 0.28034, 0.271514, 0.274971, 0.273879, 0.275163, 0.273386, 0.288524, 0.288455, 0.275962], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Code stats:
        Number of loops: 	25
        Max loop nest depth: 	5
        Additions: 		1439
        Multiplications: 	594
        Divisions: 		0
        Logical: 		0
        Reads: 			2820
        Writes: 		499
        Comparisons:		25
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest32.exe __orio_perftest32.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest32.exe  
Program Test Output: 
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295039}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295524}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295618}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295304}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295101}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295165}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.29178}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291607}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291497}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292829}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291656}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.29275}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292076}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292209}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292184}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292455}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.299327}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291631}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.297317}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.296595}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291593}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291833}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.297274}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292097}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291869}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291601}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291765}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292402}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.293618}
{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292541}

out:
 ["{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295039}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295524}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295618}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295304}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295101}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.295165}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.29178}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291607}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291497}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292829}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291656}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.29275}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292076}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292209}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292184}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292455}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.299327}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291631}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.297317}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.296595}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291593}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291833}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.297274}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292097}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291869}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291601}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.291765}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292402}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.293618}", "{'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]' : 0.292541}"]
returning from 'run': {'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]': ([0.295039, 0.295524, 0.295618, 0.295304, 0.295101, 0.295165, 0.29178, 0.291607, 0.291497, 0.292829, 0.291656, 0.29275, 0.292076, 0.292209, 0.292184, 0.292455, 0.299327, 0.291631, 0.297317, 0.296595, 0.291593, 0.291833, 0.297274, 0.292097, 0.291869, 0.291601, 0.291765, 0.292402, 0.293618, 0.292541], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[0, 2, 1, 4, 4, 2, 1, 1, 8, 0, 29, 23, 1, 1, 0, 1, 0, 1]': ([0.295039, 0.295524, 0.295618, 0.295304, 0.295101, 0.295165, 0.29178, 0.291607, 0.291497, 0.292829, 0.291656, 0.29275, 0.292076, 0.292209, 0.292184, 0.292455, 0.299327, 0.291631, 0.297317, 0.296595, 0.291593, 0.291833, 0.297274, 0.292097, 0.291869, 0.291601, 0.291765, 0.292402, 0.293618, 0.292541], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Length of requested configs: 1
Result was on Database, Returning Now
Length of requested configs: 1
Code stats:
        Number of loops: 	27
        Max loop nest depth: 	6
        Additions: 		1416
        Multiplications: 	330
        Divisions: 		0
        Logical: 		0
        Reads: 			2213
        Writes: 		235
        Comparisons:		27
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest33.exe __orio_perftest33.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest33.exe  
orio.main.tuner.ptest_driver: failed to execute the test code: " ./__orio_perftest33.exe  "
 --> CalledProcessError: Command ' ./__orio_perftest33.exe  ' returned non-zero exit status 1
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 369, in __execute
    % (cmd,e.__class__.__name__, e),doexit = False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

orio.main.tuner.ptest_driver:  performance testing failed: " ./__orio_perftest33.exe  "
  File "../../../orcc", line 27, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/home/phrb/code/orio/orio/main/orio_main.py", line 109, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags, True)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 45, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/home/phrb/code/orio/orio/main/opt_driver.py", line 120, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/home/phrb/code/orio/orio/main/tuner/tuner.py", line 152, in tune
    best_perf_params, best_perf_cost = search_eng.search()

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 122, in search
    best_coord,best_perf,search_time,runs = self.searchBestCoord(startCoord)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 658, in searchBestCoord
    best_point = self.dopt_anova(initial_factors, initial_inverse_factors, data)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 534, in dopt_anova
    i)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 457, in dopt_anova_step
    design = self.measure_design(design, response, fixed_factors)

  File "/home/phrb/code/orio/orio/main/tuner/search/doptanova/doptanova.py", line 358, in measure_design
    measurement = self.getPerfCosts([candidate])

  File "/home/phrb/code/orio/orio/main/tuner/search/search.py", line 327, in getPerfCosts
    new_perf_costs = self.ptdriver.run(test_code, perf_params=perf_params,coord=coord_key)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 489, in run
    perf_costs = self.__execute(perf_params)

  File "/home/phrb/code/orio/orio/main/tuner/ptest_driver.py", line 428, in __execute
    err('orio.main.tuner.ptest_driver:  performance testing failed: "%s"' % cmd, doexit=False)

  File "/home/phrb/code/orio/orio/main/util/globals.py", line 342, in err
    errmsg + "\n" + "\n".join(traceback.format_stack())

returning from 'run': {}
Stored as a failed configuration
Final perf_costs: {}
Length of requested configs: 1
Result was on Database, Returning Now
Complete design, with measurements:
    T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
8      2    0    2    1    0    5       1       1   27   0  28  25    0    0
18     2    3    6    1    5    4       1       1   13  15   0  28    1    1
34     5    5    5    5    0    4       1       0    8   2   0   9    0    0
52     2    2    2    4    2    6       0       0   25   6  26   0    1    1
65     3    6    2    3    5    2       0       1   29  23  15   0    1    0
102    4    6    2    0    6    2       0       0   15  12   0   8    0    1
110    3    5    4    2    4    2       1       0   13   1   7   0    0    1
112    3    2    1    0    6    1       0       1   17  24   0  24    0    0
123    1    6    6    1    0    4       1       1   24   9   0   3    0    1
138    5    3    4    5    2    6       0       1   21   9   9   0    0    0
152    3    5    5    4    6    3       1       0   26  28  29   0    0    0
174    6    2    1    6    0    5       1       1    8  28  29   0    0    0
191    3    3    3    5    0    0       1       1   13  15   0   6    2    0
215    3    6    1    6    6    3       0       0   28   6   8   0    1    0
217    5    2    2    3    6    2       0       0   23  12   9   0    0    2
222    4    2    6    0    0    0       0       1   19  10  19   0    1    1
251    1    0    4    4    1    5       0       1   13   0  24  22    1    0
291    2    5    0    1    3    5       0       1   21   7  14   0    0    2
296    6    1    0    4    6    5       0       1   10   3  29   0    0    1
308    0    2    2    2    3    3       0       0    3  21   0  27    0    0
329    6    4    6    5    5    0       1       1    1   0  16   3    1    0
335    3    0    1    2    0    3       1       1   27   0  10  22    1    0
341    0    4    3    5    6    1       1       1   17  28   0   9    0    0
346    2    0    5    6    6    0       0       0   14  12   0  21    0    1
353    2    2    3    2    2    5       0       1    8   0  27   9    2    0
355    0    1    4    1    6    5       1       0   28   0   1   1    0    0
356    3    1    4    5    0    2       0       0    6   5  20   0    0    0
362    1    0    0    4    6    0       1       1    8  25   6   0    1    1
372    2    3    3    5    0    0       0       1    3   9   0  25    2    0
398    1    6    2    5    5    5       1       1   27   0  29  26    2    0
399    3    6    1    3    0    1       1       1   19   0   9  19    0    1
415    5    2    2    3    6    2       1       0    2   9  14   0    1    0
416    4    2    1    5    6    5       0       0   23   9  12   0    2    0
421    2    3    4    4    3    2       1       1    5  14   9   0    1    0
424    4    1    2    0    4    6       0       0   19  26   1   0    2    0
430    1    4    0    2    2    1       0       0    1   1   0  21    1    0
432    0    2    1    4    4    2       1       1    8   0  29  23    1    1
440    0    6    6    2    4    5       0       1   10  27  27   0    0    1
450    5    1    4    0    5    2       0       0   25  26   0   9    0    2
    RT_K SCR VEC1 VEC2 cost_mean
8      1   0    0    0 0.8751998
18     0   1    0    0 0.2703545
34     0   0    0    1 0.4044643
52     0   0    0    0 0.2714202
65     0   0    1    1 0.2683854
102    0   1    1    0 0.4463528
110    1   1    1    1 0.3975898
112    0   0    1    0 0.7503794
123    1   1    1    0 0.4854792
138    1   0    0    1 0.3710747
152    2   0    1    1 0.8293980
174    1   1    0    0 0.7945604
191    0   0    0    0 0.4725594
215    1   1    1    0 0.3208275
217    0   0    0    0 0.4911358
222    0   1    0    1 0.2501760
251    0   1    1    0 0.4190847
291    0   0    0    0 0.4217889
296    1   1    1    1 0.3501521
308    2   0    1    0 0.5855932
329    1   0    0    0 0.3443653
335    0   0    1    1 0.3429558
341    1   1    1    0 0.4427473
346    0   1    1    1 0.2961579
353    0   1    1    0 0.4016510
355    0   1    0    0 0.6937761
356    0   0    0    0 0.2618920
362    0   0    1    0 0.2577156
372    0   1    0    0 0.3948153
398    0   0    1    0 0.9288465
399    1   1    1    1 1.0844080
415    1   0    0    0 0.3664678
416    0   0    1    1 0.5872257
421    0   1    1    1 0.2327335
424    0   1    1    1 0.4662241
430    1   0    0    1 0.2744127
432    0   1    0    1 0.2934752
440    0   0    1    0 0.4342395
450    0   1    1    0 0.3219709

Step Space Names:  [1] "T1_I"    "T1_J"    "T1_K"    "T2_I"    "T2_J"    "T2_K"    "ACOPY_x"
 [8] "ACOPY_y" "U1_I"    "U_I"     "U_J"     "U_K"     "RT_I"    "RT_J"   
[15] "RT_K"    "SCR"     "VEC1"    "VEC2"   

Heteroscedasticity Test p-value: 0.399141281704
Regression Step:                Df  Sum Sq Mean Sq F value Pr(>F)  
T1_I             1 0.00229 0.00229   0.102 0.7589  
T1_J             1 0.05247 0.05247   2.337 0.1701  
T1_K             1 0.06846 0.06846   3.050 0.1243  
T2_I             1 0.00603 0.00603   0.269 0.6202  
T2_J             1 0.01967 0.01967   0.876 0.3804  
T2_K             1 0.06727 0.06727   2.997 0.1270  
ACOPY_x          1 0.20694 0.20694   9.218 0.0189 *
ACOPY_y          1 0.00091 0.00091   0.040 0.8465  
U1_I             1 0.08810 0.08810   3.924 0.0881 .
U_I              1 0.02125 0.02125   0.946 0.3630  
U_J              1 0.02985 0.02985   1.330 0.2867  
U_K              1 0.23784 0.23784  10.595 0.0140 *
RT_I             1 0.03236 0.03236   1.441 0.2690  
RT_J             1 0.06145 0.06145   2.737 0.1420  
RT_K             1 0.00852 0.00852   0.380 0.5573  
SCR              1 0.00181 0.00181   0.080 0.7849  
VEC1             1 0.00201 0.00201   0.090 0.7734  
VEC2             1 0.04603 0.04603   2.051 0.1952  
I(1/(1 + T1_I))  1 0.00669 0.00669   0.298 0.6021  
I(1/(1 + T1_J))  1 0.03003 0.03003   1.338 0.2854  
I(1/(1 + T1_K))  1 0.00002 0.00002   0.001 0.9797  
I(1/(1 + T2_I))  1 0.01158 0.01158   0.516 0.4959  
I(1/(1 + T2_J))  1 0.07425 0.07425   3.308 0.1118  
I(1/(1 + T2_K))  1 0.22823 0.22823  10.167 0.0153 *
I(1/(1 + U1_I))  1 0.00639 0.00639   0.285 0.6102  
I(1/(1 + U_I))   1 0.16348 0.16348   7.282 0.0307 *
I(1/(1 + U_J))   1 0.01954 0.01954   0.871 0.3819  
I(1/(1 + U_K))   1 0.00045 0.00045   0.020 0.8909  
I(1/(1 + RT_I))  1 0.02786 0.02786   1.241 0.3020  
I(1/(1 + RT_J))  1 0.00841 0.00841   0.375 0.5599  
I(1/(1 + RT_K))  1 0.00208 0.00208   0.093 0.7698  
Residuals        7 0.15714 0.02245                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Predicting Best
Identical predictions (tol = 1e-5): 1
Getting Best from Design
Response: ['cost_mean']
Design Names:  [1] "T1_I"      "T1_J"      "T1_K"      "T2_I"      "T2_J"      "T2_K"     
 [7] "ACOPY_x"   "ACOPY_y"   "U1_I"      "U_I"       "U_J"       "U_K"      
[13] "RT_I"      "RT_J"      "RT_K"      "SCR"       "VEC1"      "VEC2"     
[19] "cost_mean"

Design Response:     cost_mean
8   0.8751998
18  0.2703545
34  0.4044643
52  0.2714202
65  0.2683854
102 0.4463528
110 0.3975898
112 0.7503794
123 0.4854792
138 0.3710747
152 0.8293980
174 0.7945604
191 0.4725594
215 0.3208275
217 0.4911358
222 0.2501760
251 0.4190847
291 0.4217889
296 0.3501521
308 0.5855932
329 0.3443653
335 0.3429558
341 0.4427473
346 0.2961579
353 0.4016510
355 0.6937761
356 0.2618920
362 0.2577156
372 0.3948153
398 0.9288465
399 1.0844080
415 0.3664678
416 0.5872257
421 0.2327335
424 0.4662241
430 0.2744127
432 0.2934752
440 0.4342395
450 0.3219709

Getting fixed variables
Fixed Variables: {'U_K': 2, 'ACOPY_x': 0, 'U1_I': 13}
Pruning Data
Predicted best column U_K: [1] 2

Predicted best column ACOPY_x: [1] 0

Predicted best column U1_I: [1] 13

Dimensions of Pruned Data: [1] 294  18
Pruned data names:  [1] "T1_I"    "T1_J"    "T1_K"    "T2_I"    "T2_J"    "T2_K"    "ACOPY_x"
 [8] "ACOPY_y" "U1_I"    "U_I"     "U_J"     "U_K"     "RT_I"    "RT_J"   
[15] "RT_K"    "SCR"     "VEC1"    "VEC2"   

NULL
Pruning Model
Best Predicted:        T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
161278    6    0    0    4    3    3       0       1   13   5   0   2    2    0
       RT_K SCR VEC1 VEC2
161278    0   0    0    0

Best From Design:     T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
421    2    3    4    4    3    2       1       1    5  14   9   0    1    0
    RT_K SCR VEC1 VEC2 cost_mean
421    0   1    1    1 0.2327335

Pruned Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_y', 'U_I', 'U_J', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Fixed Factors: {'U_K': 2, 'ACOPY_x': 0, 'U1_I': 13}
Length of requested configs: 1
Result was on Database, Returning Now
Starting Point (-O3):
0.6593555
Predicted Best Point:
[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]
Length of requested configs: 1
WARNING: orio.module.loop.submodule.tile.transformation: tile size 512 must be greater than the stride value 512; tile index = iii
Code stats:
        Number of loops: 	47
        Max loop nest depth: 	4
        Additions: 		1592
        Multiplications: 	390
        Divisions: 		0
        Logical: 		0
        Reads: 			2737
        Writes: 		328
        Comparisons:		47
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest34.exe __orio_perftest34.c timer_cpu.o -lm
 running test:
	 ./__orio_perftest34.exe  
Program Test Output: 
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475946}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.476848}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473997}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474142}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473822}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475679}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474238}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.480133}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474941}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.476152}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473773}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475228}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474235}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474539}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474856}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474655}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475406}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474254}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475078}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473528}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.47489}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473623}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.476558}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475219}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.477686}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474189}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.479986}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474067}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.47412}
{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.47403}

out:
 ["{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475946}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.476848}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473997}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474142}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473822}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475679}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474238}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.480133}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474941}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.476152}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473773}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475228}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474235}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474539}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474856}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474655}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475406}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474254}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475078}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473528}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.47489}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.473623}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.476558}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.475219}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.477686}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474189}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.479986}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.474067}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.47412}", "{'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]' : 0.47403}"]
returning from 'run': {'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]': ([0.475946, 0.476848, 0.473997, 0.474142, 0.473822, 0.475679, 0.474238, 0.480133, 0.474941, 0.476152, 0.473773, 0.475228, 0.474235, 0.474539, 0.474856, 0.474655, 0.475406, 0.474254, 0.475078, 0.473528, 0.47489, 0.473623, 0.476558, 0.475219, 0.477686, 0.474189, 0.479986, 0.474067, 0.47412, 0.47403], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Stored as a sucessful configuration
Final perf_costs: {'[6, 0, 0, 4, 3, 3, 0, 1, 13, 5, 0, 2, 2, 0, 0, 0, 0, 0]': ([0.475946, 0.476848, 0.473997, 0.474142, 0.473822, 0.475679, 0.474238, 0.480133, 0.474941, 0.476152, 0.473773, 0.475228, 0.474235, 0.474539, 0.474856, 0.474655, 0.475406, 0.474254, 0.475078, 0.473528, 0.47489, 0.473623, 0.476558, 0.475219, 0.477686, 0.474189, 0.479986, 0.474067, 0.47412, 0.47403], [inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])}
Design Best Point:
    T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
421    2    3    4    4    3    2       1       1    5  14   9   0    1    0
    RT_K SCR VEC1 VEC2 cost_mean
421    0   1    1    1 0.2327335

Slowdown (Design Best): 0.35297119687331036
Slowdown (Predicted Best): 0.7206945772551125
Budget: 39/180
Step 1
Full Model:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_y + U_I + U_J + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2 + I(1 / (1 + T1_I)) + I(1 / (1 + T1_J)) + I(1 / (1 + T1_K)) + I(1 / (1 + T2_I)) + I(1 / (1 + T2_J)) + I(1 / (1 + T2_K)) + I(1 / (1 + U_I)) + I(1 / (1 + U_J)) + I(1 / (1 + RT_I)) + I(1 / (1 + RT_J)) + I(1 / (1 + RT_K))
Fixed Factors: {'U_K': 2, 'ACOPY_x': 0, 'U1_I': 13}
Full data does not fit on budget
Computing D-Optimal Design
Updating Constraints
Parameter Range Values: {'ACOPY_x': [False, True], 'ACOPY_y': [False, True], 'RT_K': [1, 8, 32], 'T1_I': [1, 16, 32, 64, 128, 256, 512], 'T1_J': [1, 16, 32, 64, 128, 256, 512], 'T1_K': [1, 16, 32, 64, 128, 256, 512], 'U_K': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_J': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U1_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'T2_K': [1, 64, 128, 256, 512, 1024, 2048], 'T2_J': [1, 64, 128, 256, 512, 1024, 2048], 'T2_I': [1, 64, 128, 256, 512, 1024, 2048], 'VEC2': [False, True], 'VEC1': [False, True], 'RT_I': [1, 8, 32], 'SCR': [False, True], 'RT_J': [1, 8, 32]}
Variable Ranges: {'ACOPY_x': [False, True], 'ACOPY_y': [False, True], 'RT_K': [1, 8, 32], 'T1_I': [1, 16, 32, 64, 128, 256, 512], 'T1_J': [1, 16, 32, 64, 128, 256, 512], 'T1_K': [1, 16, 32, 64, 128, 256, 512], 'U_K': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_J': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'U1_I': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'T2_K': [1, 64, 128, 256, 512, 1024, 2048], 'T2_J': [1, 64, 128, 256, 512, 1024, 2048], 'T2_I': [1, 64, 128, 256, 512, 1024, 2048], 'VEC2': [False, True], 'VEC1': [False, True], 'RT_I': [1, 8, 32], 'SCR': [False, True], 'RT_J': [1, 8, 32]}
Current Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_y', 'U_I', 'U_J', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Constraint Text: True and (((T2_I ==1 )or (T2_I %T1_I ==0 ))) and (((T2_J ==1 )or (T2_J %T1_J ==0 ))) and (((T2_K ==1 )or (T2_K %T1_K ==0 ))) and ((RT_I *RT_J +RT_I *RT_K +RT_J *RT_K <=150 )) and (((U_I ==1 )or (U_J ==1 )or (U_K ==1 )))
Updated Constraint: True and (((variable_ranges["T2_I"][int(x[3])] ==1 )or (variable_ranges["T2_I"][int(x[3])] %variable_ranges["T1_I"][int(x[0])] ==0 ))) and (((variable_ranges["T2_J"][int(x[4])] ==1 )or (variable_ranges["T2_J"][int(x[4])] %variable_ranges["T1_J"][int(x[1])] ==0 ))) and (((variable_ranges["T2_K"][int(x[5])] ==1 )or (variable_ranges["T2_K"][int(x[5])] %variable_ranges["T1_K"][int(x[2])] ==0 ))) and ((variable_ranges["RT_I"][int(x[9])] *variable_ranges["RT_J"][int(x[10])] +variable_ranges["RT_I"][int(x[9])] *variable_ranges["RT_K"][int(x[11])] +variable_ranges["RT_J"][int(x[10])] *variable_ranges["RT_K"][int(x[11])] <=150 )) and (((variable_ranges["U_I"][int(x[7])] ==1 )or (variable_ranges["U_J"][int(x[8])] ==1 )or (3 ==1 )))
Computing D-Optimal Design with 39 experiments
Design Formula:  ~ T1_I + T1_J + T1_K + T2_I + T2_J + T2_K + ACOPY_y + U_I + U_J + RT_I + RT_J + RT_K + SCR + VEC1 + VEC2 + I(1 / (1 + T1_I)) + I(1 / (1 + T1_J)) + I(1 / (1 + T1_K)) + I(1 / (1 + T2_I)) + I(1 / (1 + T2_J)) + I(1 / (1 + T2_K)) + I(1 / (1 + U_I)) + I(1 / (1 + U_J)) + I(1 / (1 + RT_I)) + I(1 / (1 + RT_J)) + I(1 / (1 + RT_K))
Generating search space of size 390 for optFederov (does not spend evaluations)
Valid coordinates: 78
Valid coordinates: 156
Tested coordinates: 10000
Valid coordinates: 234
Valid coordinates: 312
Tested coordinates: 20000
Valid coordinates: 390
Valid/Tested configurations: 390/23173
Generated Search Space:
NULL
Model Matrix Names: NULL
Model Matrix Det: 4.3396320429215125e+52
LU Decomposition L:
[[ 1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 3.48e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 3.48e-01  1.63e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 3.29e-01  1.59e-01  9.38e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.02e-01  2.76e-01  8.54e-02 -3.96e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.16e-01  1.77e-01  1.49e-01 -8.12e-02 -1.54e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.18e-01  1.63e-01  5.51e-02 -1.34e-03 -2.95e-01 -1.01e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 9.18e-01  7.74e-01  2.71e-01 -4.17e-01 -7.58e-01 -5.06e-01 -1.33e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.16e-02  3.59e-02 -1.66e-02 -2.27e-02 -3.89e-02 -1.98e-02  1.79e-03 -8.67e-01  1.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 1.27e-01  5.40e-02  5.19e-03 -2.66e-02 -6.35e-02 -4.04e-02  9.04e-03  2.22e-02  6.61e-02  1.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.09e-02  5.89e-03  3.23e-02 -4.27e-03 -3.49e-02 -4.11e-02  1.63e-02  3.90e-03  3.84e-02  4.95e-01  1.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.71e-02  2.57e-02  8.19e-03 -2.66e-02 -3.89e-02 -2.33e-02 -9.97e-03  6.70e-02 -1.71e-02  7.62e-01 -3.35e-01
   1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.74e-02  4.01e-02 -3.08e-02 -3.94e-02 -3.45e-02 -2.67e-02  2.03e-02  3.44e-04  5.31e-02  5.57e-01 -3.82e-01
  -5.92e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.39e-02  2.64e-02 -9.40e-03 -1.32e-02 -1.37e-02 -3.80e-03  6.74e-03  1.39e-01 -1.11e-01  5.45e-01  1.28e-02
  -1.63e-02  3.07e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.26e-02  4.85e-02 -4.22e-03  1.24e-02 -2.91e-02 -9.29e-03  9.47e-03 -4.32e-02  8.37e-02  3.98e-01  3.38e-02
  -3.85e-02  5.23e-02  1.32e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.35e-02  2.97e-02  1.74e-02 -1.69e-02 -2.75e-02 -1.85e-02 -6.67e-03  1.30e-02  2.98e-02  5.12e-01  5.16e-02
   3.31e-02 -5.90e-02 -5.49e-03 -6.80e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.93e-02 -8.72e-02  3.09e-03 -1.61e-02 -3.99e-02 -2.28e-02  1.83e-03 -4.87e-04  6.61e-02  7.04e-01  4.87e-03
  -1.43e-03  2.44e-02 -6.23e-03  5.79e-03 -1.61e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 5.05e-02  1.86e-02 -1.26e-01 -1.72e-02 -5.00e-02 -3.03e-02  6.72e-03  7.44e-03  6.09e-02  7.54e-01  1.15e-02
  -3.07e-03  9.58e-03  1.41e-02  3.69e-04 -2.77e-02  6.89e-03  1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 5.14e-02  2.51e-02 -9.31e-03 -1.46e-01 -4.42e-02 -2.29e-02  5.27e-03  4.00e-02  1.90e-02  7.12e-01 -3.81e-03
   2.98e-04  2.88e-03  1.84e-02  3.98e-02 -6.68e-03 -2.37e-02 -1.17e-02  1.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.84e-02  1.76e-02 -8.44e-04 -1.97e-02 -1.82e-01 -2.78e-02  7.23e-03  1.35e-03  6.67e-02  7.30e-01 -1.69e-03
  -6.09e-03  2.28e-02  1.28e-02 -2.51e-02  8.17e-03  2.05e-01 -2.36e-02  5.73e-02  1.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.56e-02  1.48e-02 -3.76e-03 -1.44e-02 -2.90e-02 -1.65e-01  8.72e-03  9.02e-03  6.00e-02  7.53e-01 -1.08e-02
  -8.66e-03  2.02e-02 -8.81e-03  1.70e-02 -1.38e-02 -3.12e-02  7.13e-02 -4.30e-02 -1.13e-01  1.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 4.39e-02  2.11e-02 -6.63e-04 -3.96e-03 -1.04e-02 -1.18e-02 -1.16e-01  2.52e-04  6.19e-02  6.73e-01 -6.82e-04
   9.35e-03 -8.41e-03  1.18e-02  1.81e-02 -1.81e-02 -1.95e-02 -1.07e-01  3.17e-02 -5.49e-02  3.99e-02  1.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 6.94e-02  5.57e-02  2.21e-02 -2.70e-02 -4.61e-02 -3.59e-02  1.75e-03  2.99e-02  4.07e-02  5.97e-01 -6.62e-03
   2.41e-02  7.98e-03  2.10e-02  3.79e-02 -3.42e-02  2.58e-02  9.20e-03  7.57e-02 -1.08e-01  3.65e-02 -6.50e-03
   1.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 7.25e-02  6.78e-03 -1.80e-02 -2.99e-03 -3.36e-02 -1.15e-02  1.73e-02 -1.99e-02  5.16e-02  6.90e-01  2.00e-02
  -1.02e-02 -1.01e-02 -1.21e-02 -4.45e-02  4.62e-02 -6.17e-02 -3.14e-03 -2.27e-02  7.75e-02  1.55e-02  1.94e-03
  -8.11e-01  1.00e+00  0.00e+00  0.00e+00  0.00e+00]
 [ 1.01e-01  5.20e-02 -9.48e-03 -2.37e-02 -5.00e-02 -2.22e-02  2.25e-03  2.30e-02  4.69e-02  8.03e-01 -3.83e-01
  -3.37e-03  3.86e-03 -1.18e-03  5.33e-03 -1.26e-02  2.19e-02 -1.36e-02 -6.40e-03 -2.07e-02  8.36e-03  3.20e-02
  -1.43e-03 -2.73e-02  1.00e+00  0.00e+00  0.00e+00]
 [ 9.82e-02  4.44e-02  2.42e-03 -1.76e-02 -4.88e-02 -3.17e-02  1.12e-02 -8.99e-04  6.87e-02  7.00e-01  1.29e-01
  -3.86e-01  5.75e-03  8.98e-04 -8.94e-03 -6.05e-03 -2.00e-02 -5.61e-02  2.45e-02 -2.47e-02  5.80e-02 -1.94e-02
  -3.56e-02  5.43e-03  2.02e-01  1.00e+00  0.00e+00]
 [ 9.91e-02  3.57e-02  1.77e-02 -1.20e-02 -5.34e-02 -2.93e-02  1.78e-04  2.07e-02  4.71e-02  7.87e-01  1.44e-01
   2.20e-01 -3.70e-01 -4.23e-03 -3.42e-03  3.05e-03  1.80e-02 -4.59e-02  2.33e-02  2.55e-03  7.07e-03  2.45e-02
  -1.32e-02 -6.02e-03  1.58e-01  1.40e-01  1.00e+00]]
LU Decomposition U:
[[ 3.07e+03  7.72e+03  8.32e+03  8.26e+03  1.04e+04  1.05e+04  9.97e+03  1.49e+03  6.17e+04  0.00e+00  1.52e+03
   1.55e+03  1.56e+03  1.47e+03  1.28e+03  1.56e+03  1.24e+03  1.19e+03  1.24e+03  1.05e+03  1.09e+03  1.13e+03
   1.77e+02  3.07e+03  2.42e+03  2.38e+03  2.42e+03]
 [ 0.00e+00  1.63e+03  5.46e+01 -7.31e+01 -8.58e+01 -1.53e+02  1.83e+01  1.43e+01 -1.38e+04  8.35e+03 -4.77e+01
   1.94e+01  4.40e+01  2.33e+01  1.16e+02 -5.78e+00 -1.92e+02  5.55e+00  3.96e+00  3.73e+01 -2.93e+00 -2.07e+01
   5.65e+02 -4.99e+02  2.14e+01 -2.98e-01 -2.04e+01]
 [ 0.00e+00  0.00e+00  1.47e+03  2.65e+01 -1.35e+02  6.67e+01  9.45e+01 -3.15e+01 -1.09e+04  6.72e+03  3.56e+01
   2.87e+01 -3.07e+01  2.95e+00  5.23e+01  1.27e+01  1.10e+01 -1.80e+02 -1.87e+01  3.16e+01 -3.50e+00 -2.47e+01
   4.59e+02 -4.10e+02 -1.65e+01 -6.81e+00  1.30e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  1.30e+03 -1.65e+02 -1.15e+02  1.42e+02 -1.48e+01 -8.85e+03  5.03e+03  3.19e+00
   9.47e-01 -1.47e+01  1.91e+01  8.36e+01 -1.45e+01  1.48e+01  1.39e+01 -1.77e+02  1.86e+01 -1.00e+00 -1.11e+01
   3.43e+02 -3.00e+02 -1.36e-02 -2.12e-01  4.73e+00]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  1.46e+03 -8.46e+01 -1.03e+02 -1.23e+01 -9.97e+03  5.77e+03 -1.74e+01
   1.37e+01  2.58e+01  5.07e+01  5.73e+01 -7.42e+00  2.18e+01  8.69e+00 -1.16e+01 -1.92e+02 -7.66e-01 -4.86e+00
   4.02e+02 -3.63e+02  5.34e+00 -4.91e+00 -1.53e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  1.39e+03  7.59e+01 -4.23e+00 -1.34e+04  7.77e+03 -4.32e+01
   2.32e+01  2.16e+01  5.49e+01  9.09e+01 -1.25e+01  2.62e+01  1.54e+01 -9.03e+00  8.36e+00 -2.02e+02 -2.28e+01
   5.27e+02 -4.64e+02  1.91e+01 -6.90e+00 -8.03e+00]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  1.58e+03 -1.29e+01 -1.73e+04  9.72e+03 -5.29e-01
   6.32e+00  5.23e+01  4.76e+01  1.12e+02 -3.25e+01  1.61e+01  1.87e+01 -2.22e+01  6.51e+00 -1.79e+01 -2.16e+02
   6.77e+02 -5.82e+02  2.59e-01 -3.54e-01 -2.26e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00 -1.10e+02 -6.34e+04  5.86e+04 -1.19e+02
  -6.25e+01  1.49e+02  1.58e+02  3.26e+02 -9.54e+01  1.03e+02  7.43e+01 -7.63e+01  4.48e+01 -5.09e+01 -8.14e+01
   2.90e+03 -2.87e+03  2.64e+01  3.44e+01 -6.47e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00 -5.77e+04  5.23e+04 -1.05e+02
  -5.50e+01  1.35e+02  1.30e+02  3.05e+02 -8.54e+01  9.51e+01  6.85e+01 -7.22e+01  4.15e+01 -4.66e+01 -7.28e+01
   2.62e+03 -2.58e+03  2.36e+01  3.05e+01 -5.84e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00 -1.70e+03  3.70e+00
   1.44e+01 -3.54e+00  1.08e+00  3.78e+00  3.19e+00 -1.46e+00 -4.37e-01  2.35e-01 -1.96e+00 -2.02e+00 -6.74e-01
  -3.02e+01  5.11e+01  2.99e-01 -5.03e+00  1.71e+00]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  1.76e+02
  -5.90e+01 -6.72e+01  2.26e+00  5.96e+00  9.09e+00  8.57e-01  2.03e+00 -6.71e-01 -2.97e-01 -1.91e+00 -1.20e-01
  -1.17e+00  3.52e+00 -6.75e+01  2.27e+01  2.53e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   1.61e+02 -9.52e+01 -2.62e+00 -6.19e+00  5.31e+00 -2.30e-01 -4.94e-01  4.79e-02 -9.79e-01 -1.39e+00  1.50e+00
   3.87e+00 -1.64e+00 -5.42e-01 -6.21e+01  3.54e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  1.18e+02  3.63e+00  6.16e+00 -6.96e+00  2.88e+00  1.13e+00  3.40e-01  2.69e+00  2.38e+00 -9.91e-01
   9.41e-01 -1.19e+00  4.55e-01  6.78e-01 -4.36e+01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  9.39e+01  1.24e+00 -5.16e-01 -5.85e-01  1.32e+00  1.73e+00  1.20e+00 -8.27e-01  1.11e+00
   1.97e+00 -1.14e+00 -1.11e-01  8.44e-02 -3.98e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  9.31e+01 -6.33e+00  5.39e-01  3.44e-02  3.70e+00 -2.33e+00  1.58e+00  1.68e+00
   3.53e+00 -4.15e+00  4.96e-01 -8.32e-01 -3.18e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  9.53e+01 -1.54e+00 -2.64e+00 -6.37e-01  7.79e-01 -1.31e+00 -1.73e+00
  -3.26e+00  4.40e+00 -1.20e+00 -5.77e-01  2.91e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  7.74e+00  5.33e-02 -1.83e-01  1.59e+00 -2.41e-01 -1.51e-01
   2.00e-01 -4.77e-01  1.69e-01 -1.55e-01  1.39e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  8.32e+00 -9.73e-02 -1.97e-01  5.93e-01 -8.89e-01
   7.66e-02 -2.62e-02 -1.14e-01 -4.67e-01 -3.82e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  8.13e+00  4.66e-01 -3.49e-01  2.57e-01
   6.16e-01 -1.85e-01 -5.20e-02  1.99e-01  1.90e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  7.21e+00 -8.15e-01 -3.95e-01
  -7.76e-01  5.58e-01 -1.49e-01 -1.78e-01  1.84e-02]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  7.02e+00  2.80e-01
   2.56e-01  1.09e-01  5.87e-02  4.07e-01  4.96e-02]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  6.94e+00
  -4.51e-02  1.35e-02  2.22e-01 -1.35e-01  1.70e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   1.29e+01 -1.05e+01 -1.85e-02 -4.59e-01 -1.71e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  4.69e+00 -1.28e-01  2.55e-02 -2.82e-02]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  1.59e+00  3.21e-01  2.51e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  1.63e+00  2.29e-01]
 [ 0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00  0.00e+00
   0.00e+00  0.00e+00  0.00e+00  0.00e+00  1.63e+00]]
LU Decomposition P:
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]
Computing Dependency Between Columns
(i: 0, j: 1)
Independent
(i: 0, j: 2)
Independent
(i: 0, j: 3)
Independent
(i: 0, j: 4)
Independent
(i: 0, j: 5)
Independent
(i: 0, j: 6)
Independent
(i: 0, j: 7)
Independent
(i: 0, j: 8)
Independent
(i: 0, j: 9)
Independent
(i: 0, j: 10)
Independent
(i: 0, j: 11)
Independent
(i: 0, j: 12)
Independent
(i: 0, j: 13)
Independent
(i: 0, j: 14)
Independent
(i: 0, j: 15)
Independent
(i: 0, j: 16)
Independent
(i: 0, j: 17)
Independent
(i: 0, j: 18)
Independent
(i: 0, j: 19)
Independent
(i: 0, j: 20)
Independent
(i: 0, j: 21)
Independent
(i: 0, j: 22)
Independent
(i: 0, j: 23)
Independent
(i: 0, j: 24)
Independent
(i: 0, j: 25)
Independent
(i: 0, j: 26)
Independent
(i: 1, j: 0)
Independent
(i: 1, j: 2)
Independent
(i: 1, j: 3)
Independent
(i: 1, j: 4)
Independent
(i: 1, j: 5)
Independent
(i: 1, j: 6)
Independent
(i: 1, j: 7)
Independent
(i: 1, j: 8)
Independent
(i: 1, j: 9)
Independent
(i: 1, j: 10)
Independent
(i: 1, j: 11)
Independent
(i: 1, j: 12)
Independent
(i: 1, j: 13)
Independent
(i: 1, j: 14)
Independent
(i: 1, j: 15)
Independent
(i: 1, j: 16)
Independent
(i: 1, j: 17)
Independent
(i: 1, j: 18)
Independent
(i: 1, j: 19)
Independent
(i: 1, j: 20)
Independent
(i: 1, j: 21)
Independent
(i: 1, j: 22)
Independent
(i: 1, j: 23)
Independent
(i: 1, j: 24)
Independent
(i: 1, j: 25)
Independent
(i: 1, j: 26)
Independent
(i: 2, j: 0)
Independent
(i: 2, j: 1)
Independent
(i: 2, j: 3)
Independent
(i: 2, j: 4)
Independent
(i: 2, j: 5)
Independent
(i: 2, j: 6)
Independent
(i: 2, j: 7)
Independent
(i: 2, j: 8)
Independent
(i: 2, j: 9)
Independent
(i: 2, j: 10)
Independent
(i: 2, j: 11)
Independent
(i: 2, j: 12)
Independent
(i: 2, j: 13)
Independent
(i: 2, j: 14)
Independent
(i: 2, j: 15)
Independent
(i: 2, j: 16)
Independent
(i: 2, j: 17)
Independent
(i: 2, j: 18)
Independent
(i: 2, j: 19)
Independent
(i: 2, j: 20)
Independent
(i: 2, j: 21)
Independent
(i: 2, j: 22)
Independent
(i: 2, j: 23)
Independent
(i: 2, j: 24)
Independent
(i: 2, j: 25)
Independent
(i: 2, j: 26)
Independent
(i: 3, j: 0)
Independent
(i: 3, j: 1)
Independent
(i: 3, j: 2)
Independent
(i: 3, j: 4)
Independent
(i: 3, j: 5)
Independent
(i: 3, j: 6)
Independent
(i: 3, j: 7)
Independent
(i: 3, j: 8)
Independent
(i: 3, j: 9)
Independent
(i: 3, j: 10)
Independent
(i: 3, j: 11)
Independent
(i: 3, j: 12)
Independent
(i: 3, j: 13)
Independent
(i: 3, j: 14)
Independent
(i: 3, j: 15)
Independent
(i: 3, j: 16)
Independent
(i: 3, j: 17)
Independent
(i: 3, j: 18)
Independent
(i: 3, j: 19)
Independent
(i: 3, j: 20)
Independent
(i: 3, j: 21)
Independent
(i: 3, j: 22)
Independent
(i: 3, j: 23)
Independent
(i: 3, j: 24)
Independent
(i: 3, j: 25)
Independent
(i: 3, j: 26)
Independent
(i: 4, j: 0)
Independent
(i: 4, j: 1)
Independent
(i: 4, j: 2)
Independent
(i: 4, j: 3)
Independent
(i: 4, j: 5)
Independent
(i: 4, j: 6)
Independent
(i: 4, j: 7)
Independent
(i: 4, j: 8)
Independent
(i: 4, j: 9)
Independent
(i: 4, j: 10)
Independent
(i: 4, j: 11)
Independent
(i: 4, j: 12)
Independent
(i: 4, j: 13)
Independent
(i: 4, j: 14)
Independent
(i: 4, j: 15)
Independent
(i: 4, j: 16)
Independent
(i: 4, j: 17)
Independent
(i: 4, j: 18)
Independent
(i: 4, j: 19)
Independent
(i: 4, j: 20)
Independent
(i: 4, j: 21)
Independent
(i: 4, j: 22)
Independent
(i: 4, j: 23)
Independent
(i: 4, j: 24)
Independent
(i: 4, j: 25)
Independent
(i: 4, j: 26)
Independent
(i: 5, j: 0)
Independent
(i: 5, j: 1)
Independent
(i: 5, j: 2)
Independent
(i: 5, j: 3)
Independent
(i: 5, j: 4)
Independent
(i: 5, j: 6)
Independent
(i: 5, j: 7)
Independent
(i: 5, j: 8)
Independent
(i: 5, j: 9)
Independent
(i: 5, j: 10)
Independent
(i: 5, j: 11)
Independent
(i: 5, j: 12)
Independent
(i: 5, j: 13)
Independent
(i: 5, j: 14)
Independent
(i: 5, j: 15)
Independent
(i: 5, j: 16)
Independent
(i: 5, j: 17)
Independent
(i: 5, j: 18)
Independent
(i: 5, j: 19)
Independent
(i: 5, j: 20)
Independent
(i: 5, j: 21)
Independent
(i: 5, j: 22)
Independent
(i: 5, j: 23)
Independent
(i: 5, j: 24)
Independent
(i: 5, j: 25)
Independent
(i: 5, j: 26)
Independent
(i: 6, j: 0)
Independent
(i: 6, j: 1)
Independent
(i: 6, j: 2)
Independent
(i: 6, j: 3)
Independent
(i: 6, j: 4)
Independent
(i: 6, j: 5)
Independent
(i: 6, j: 7)
Independent
(i: 6, j: 8)
Independent
(i: 6, j: 9)
Independent
(i: 6, j: 10)
Independent
(i: 6, j: 11)
Independent
(i: 6, j: 12)
Independent
(i: 6, j: 13)
Independent
(i: 6, j: 14)
Independent
(i: 6, j: 15)
Independent
(i: 6, j: 16)
Independent
(i: 6, j: 17)
Independent
(i: 6, j: 18)
Independent
(i: 6, j: 19)
Independent
(i: 6, j: 20)
Independent
(i: 6, j: 21)
Independent
(i: 6, j: 22)
Independent
(i: 6, j: 23)
Independent
(i: 6, j: 24)
Independent
(i: 6, j: 25)
Independent
(i: 6, j: 26)
Independent
(i: 7, j: 0)
Independent
(i: 7, j: 1)
Independent
(i: 7, j: 2)
Independent
(i: 7, j: 3)
Independent
(i: 7, j: 4)
Independent
(i: 7, j: 5)
Independent
(i: 7, j: 6)
Independent
(i: 7, j: 8)
Independent
(i: 7, j: 9)
Independent
(i: 7, j: 10)
Independent
(i: 7, j: 11)
Independent
(i: 7, j: 12)
Independent
(i: 7, j: 13)
Independent
(i: 7, j: 14)
Independent
(i: 7, j: 15)
Independent
(i: 7, j: 16)
Independent
(i: 7, j: 17)
Independent
(i: 7, j: 18)
Independent
(i: 7, j: 19)
Independent
(i: 7, j: 20)
Independent
(i: 7, j: 21)
Independent
(i: 7, j: 22)
Independent
(i: 7, j: 23)
Independent
(i: 7, j: 24)
Independent
(i: 7, j: 25)
Independent
(i: 7, j: 26)
Independent
(i: 8, j: 0)
Independent
(i: 8, j: 1)
Independent
(i: 8, j: 2)
Independent
(i: 8, j: 3)
Independent
(i: 8, j: 4)
Independent
(i: 8, j: 5)
Independent
(i: 8, j: 6)
Independent
(i: 8, j: 7)
Independent
(i: 8, j: 9)
Independent
(i: 8, j: 10)
Independent
(i: 8, j: 11)
Independent
(i: 8, j: 12)
Independent
(i: 8, j: 13)
Independent
(i: 8, j: 14)
Independent
(i: 8, j: 15)
Independent
(i: 8, j: 16)
Independent
(i: 8, j: 17)
Independent
(i: 8, j: 18)
Independent
(i: 8, j: 19)
Independent
(i: 8, j: 20)
Independent
(i: 8, j: 21)
Independent
(i: 8, j: 22)
Independent
(i: 8, j: 23)
Independent
(i: 8, j: 24)
Independent
(i: 8, j: 25)
Independent
(i: 8, j: 26)
Independent
(i: 9, j: 0)
Independent
(i: 9, j: 1)
Independent
(i: 9, j: 2)
Independent
(i: 9, j: 3)
Independent
(i: 9, j: 4)
Independent
(i: 9, j: 5)
Independent
(i: 9, j: 6)
Independent
(i: 9, j: 7)
Independent
(i: 9, j: 8)
Independent
(i: 9, j: 10)
Independent
(i: 9, j: 11)
Independent
(i: 9, j: 12)
Independent
(i: 9, j: 13)
Independent
(i: 9, j: 14)
Independent
(i: 9, j: 15)
Independent
(i: 9, j: 16)
Independent
(i: 9, j: 17)
Independent
(i: 9, j: 18)
Independent
(i: 9, j: 19)
Independent
(i: 9, j: 20)
Independent
(i: 9, j: 21)
Independent
(i: 9, j: 22)
Independent
(i: 9, j: 23)
Independent
(i: 9, j: 24)
Independent
(i: 9, j: 25)
Independent
(i: 9, j: 26)
Independent
(i: 10, j: 0)
Independent
(i: 10, j: 1)
Independent
(i: 10, j: 2)
Independent
(i: 10, j: 3)
Independent
(i: 10, j: 4)
Independent
(i: 10, j: 5)
Independent
(i: 10, j: 6)
Independent
(i: 10, j: 7)
Independent
(i: 10, j: 8)
Independent
(i: 10, j: 9)
Independent
(i: 10, j: 11)
Independent
(i: 10, j: 12)
Independent
(i: 10, j: 13)
Independent
(i: 10, j: 14)
Independent
(i: 10, j: 15)
Independent
(i: 10, j: 16)
Independent
(i: 10, j: 17)
Independent
(i: 10, j: 18)
Independent
(i: 10, j: 19)
Independent
(i: 10, j: 20)
Independent
(i: 10, j: 21)
Independent
(i: 10, j: 22)
Independent
(i: 10, j: 23)
Independent
(i: 10, j: 24)
Independent
(i: 10, j: 25)
Independent
(i: 10, j: 26)
Independent
(i: 11, j: 0)
Independent
(i: 11, j: 1)
Independent
(i: 11, j: 2)
Independent
(i: 11, j: 3)
Independent
(i: 11, j: 4)
Independent
(i: 11, j: 5)
Independent
(i: 11, j: 6)
Independent
(i: 11, j: 7)
Independent
(i: 11, j: 8)
Independent
(i: 11, j: 9)
Independent
(i: 11, j: 10)
Independent
(i: 11, j: 12)
Independent
(i: 11, j: 13)
Independent
(i: 11, j: 14)
Independent
(i: 11, j: 15)
Independent
(i: 11, j: 16)
Independent
(i: 11, j: 17)
Independent
(i: 11, j: 18)
Independent
(i: 11, j: 19)
Independent
(i: 11, j: 20)
Independent
(i: 11, j: 21)
Independent
(i: 11, j: 22)
Independent
(i: 11, j: 23)
Independent
(i: 11, j: 24)
Independent
(i: 11, j: 25)
Independent
(i: 11, j: 26)
Independent
(i: 12, j: 0)
Independent
(i: 12, j: 1)
Independent
(i: 12, j: 2)
Independent
(i: 12, j: 3)
Independent
(i: 12, j: 4)
Independent
(i: 12, j: 5)
Independent
(i: 12, j: 6)
Independent
(i: 12, j: 7)
Independent
(i: 12, j: 8)
Independent
(i: 12, j: 9)
Independent
(i: 12, j: 10)
Independent
(i: 12, j: 11)
Independent
(i: 12, j: 13)
Independent
(i: 12, j: 14)
Independent
(i: 12, j: 15)
Independent
(i: 12, j: 16)
Independent
(i: 12, j: 17)
Independent
(i: 12, j: 18)
Independent
(i: 12, j: 19)
Independent
(i: 12, j: 20)
Independent
(i: 12, j: 21)
Independent
(i: 12, j: 22)
Independent
(i: 12, j: 23)
Independent
(i: 12, j: 24)
Independent
(i: 12, j: 25)
Independent
(i: 12, j: 26)
Independent
(i: 13, j: 0)
Independent
(i: 13, j: 1)
Independent
(i: 13, j: 2)
Independent
(i: 13, j: 3)
Independent
(i: 13, j: 4)
Independent
(i: 13, j: 5)
Independent
(i: 13, j: 6)
Independent
(i: 13, j: 7)
Independent
(i: 13, j: 8)
Independent
(i: 13, j: 9)
Independent
(i: 13, j: 10)
Independent
(i: 13, j: 11)
Independent
(i: 13, j: 12)
Independent
(i: 13, j: 14)
Independent
(i: 13, j: 15)
Independent
(i: 13, j: 16)
Independent
(i: 13, j: 17)
Independent
(i: 13, j: 18)
Independent
(i: 13, j: 19)
Independent
(i: 13, j: 20)
Independent
(i: 13, j: 21)
Independent
(i: 13, j: 22)
Independent
(i: 13, j: 23)
Independent
(i: 13, j: 24)
Independent
(i: 13, j: 25)
Independent
(i: 13, j: 26)
Independent
(i: 14, j: 0)
Independent
(i: 14, j: 1)
Independent
(i: 14, j: 2)
Independent
(i: 14, j: 3)
Independent
(i: 14, j: 4)
Independent
(i: 14, j: 5)
Independent
(i: 14, j: 6)
Independent
(i: 14, j: 7)
Independent
(i: 14, j: 8)
Independent
(i: 14, j: 9)
Independent
(i: 14, j: 10)
Independent
(i: 14, j: 11)
Independent
(i: 14, j: 12)
Independent
(i: 14, j: 13)
Independent
(i: 14, j: 15)
Independent
(i: 14, j: 16)
Independent
(i: 14, j: 17)
Independent
(i: 14, j: 18)
Independent
(i: 14, j: 19)
Independent
(i: 14, j: 20)
Independent
(i: 14, j: 21)
Independent
(i: 14, j: 22)
Independent
(i: 14, j: 23)
Independent
(i: 14, j: 24)
Independent
(i: 14, j: 25)
Independent
(i: 14, j: 26)
Independent
(i: 15, j: 0)
Independent
(i: 15, j: 1)
Independent
(i: 15, j: 2)
Independent
(i: 15, j: 3)
Independent
(i: 15, j: 4)
Independent
(i: 15, j: 5)
Independent
(i: 15, j: 6)
Independent
(i: 15, j: 7)
Independent
(i: 15, j: 8)
Independent
(i: 15, j: 9)
Independent
(i: 15, j: 10)
Independent
(i: 15, j: 11)
Independent
(i: 15, j: 12)
Independent
(i: 15, j: 13)
Independent
(i: 15, j: 14)
Independent
(i: 15, j: 16)
Independent
(i: 15, j: 17)
Independent
(i: 15, j: 18)
Independent
(i: 15, j: 19)
Independent
(i: 15, j: 20)
Independent
(i: 15, j: 21)
Independent
(i: 15, j: 22)
Independent
(i: 15, j: 23)
Independent
(i: 15, j: 24)
Independent
(i: 15, j: 25)
Independent
(i: 15, j: 26)
Independent
(i: 16, j: 0)
Independent
(i: 16, j: 1)
Independent
(i: 16, j: 2)
Independent
(i: 16, j: 3)
Independent
(i: 16, j: 4)
Independent
(i: 16, j: 5)
Independent
(i: 16, j: 6)
Independent
(i: 16, j: 7)
Independent
(i: 16, j: 8)
Independent
(i: 16, j: 9)
Independent
(i: 16, j: 10)
Independent
(i: 16, j: 11)
Independent
(i: 16, j: 12)
Independent
(i: 16, j: 13)
Independent
(i: 16, j: 14)
Independent
(i: 16, j: 15)
Independent
(i: 16, j: 17)
Independent
(i: 16, j: 18)
Independent
(i: 16, j: 19)
Independent
(i: 16, j: 20)
Independent
(i: 16, j: 21)
Independent
(i: 16, j: 22)
Independent
(i: 16, j: 23)
Independent
(i: 16, j: 24)
Independent
(i: 16, j: 25)
Independent
(i: 16, j: 26)
Independent
(i: 17, j: 0)
Independent
(i: 17, j: 1)
Independent
(i: 17, j: 2)
Independent
(i: 17, j: 3)
Independent
(i: 17, j: 4)
Independent
(i: 17, j: 5)
Independent
(i: 17, j: 6)
Independent
(i: 17, j: 7)
Independent
(i: 17, j: 8)
Independent
(i: 17, j: 9)
Independent
(i: 17, j: 10)
Independent
(i: 17, j: 11)
Independent
(i: 17, j: 12)
Independent
(i: 17, j: 13)
Independent
(i: 17, j: 14)
Independent
(i: 17, j: 15)
Independent
(i: 17, j: 16)
Independent
(i: 17, j: 18)
Independent
(i: 17, j: 19)
Independent
(i: 17, j: 20)
Independent
(i: 17, j: 21)
Independent
(i: 17, j: 22)
Independent
(i: 17, j: 23)
Independent
(i: 17, j: 24)
Independent
(i: 17, j: 25)
Independent
(i: 17, j: 26)
Independent
(i: 18, j: 0)
Independent
(i: 18, j: 1)
Independent
(i: 18, j: 2)
Independent
(i: 18, j: 3)
Independent
(i: 18, j: 4)
Independent
(i: 18, j: 5)
Independent
(i: 18, j: 6)
Independent
(i: 18, j: 7)
Independent
(i: 18, j: 8)
Independent
(i: 18, j: 9)
Independent
(i: 18, j: 10)
Independent
(i: 18, j: 11)
Independent
(i: 18, j: 12)
Independent
(i: 18, j: 13)
Independent
(i: 18, j: 14)
Independent
(i: 18, j: 15)
Independent
(i: 18, j: 16)
Independent
(i: 18, j: 17)
Independent
(i: 18, j: 19)
Independent
(i: 18, j: 20)
Independent
(i: 18, j: 21)
Independent
(i: 18, j: 22)
Independent
(i: 18, j: 23)
Independent
(i: 18, j: 24)
Independent
(i: 18, j: 25)
Independent
(i: 18, j: 26)
Independent
(i: 19, j: 0)
Independent
(i: 19, j: 1)
Independent
(i: 19, j: 2)
Independent
(i: 19, j: 3)
Independent
(i: 19, j: 4)
Independent
(i: 19, j: 5)
Independent
(i: 19, j: 6)
Independent
(i: 19, j: 7)
Independent
(i: 19, j: 8)
Independent
(i: 19, j: 9)
Independent
(i: 19, j: 10)
Independent
(i: 19, j: 11)
Independent
(i: 19, j: 12)
Independent
(i: 19, j: 13)
Independent
(i: 19, j: 14)
Independent
(i: 19, j: 15)
Independent
(i: 19, j: 16)
Independent
(i: 19, j: 17)
Independent
(i: 19, j: 18)
Independent
(i: 19, j: 20)
Independent
(i: 19, j: 21)
Independent
(i: 19, j: 22)
Independent
(i: 19, j: 23)
Independent
(i: 19, j: 24)
Independent
(i: 19, j: 25)
Independent
(i: 19, j: 26)
Independent
(i: 20, j: 0)
Independent
(i: 20, j: 1)
Independent
(i: 20, j: 2)
Independent
(i: 20, j: 3)
Independent
(i: 20, j: 4)
Independent
(i: 20, j: 5)
Independent
(i: 20, j: 6)
Independent
(i: 20, j: 7)
Independent
(i: 20, j: 8)
Independent
(i: 20, j: 9)
Independent
(i: 20, j: 10)
Independent
(i: 20, j: 11)
Independent
(i: 20, j: 12)
Independent
(i: 20, j: 13)
Independent
(i: 20, j: 14)
Independent
(i: 20, j: 15)
Independent
(i: 20, j: 16)
Independent
(i: 20, j: 17)
Independent
(i: 20, j: 18)
Independent
(i: 20, j: 19)
Independent
(i: 20, j: 21)
Independent
(i: 20, j: 22)
Independent
(i: 20, j: 23)
Independent
(i: 20, j: 24)
Independent
(i: 20, j: 25)
Independent
(i: 20, j: 26)
Independent
(i: 21, j: 0)
Independent
(i: 21, j: 1)
Independent
(i: 21, j: 2)
Independent
(i: 21, j: 3)
Independent
(i: 21, j: 4)
Independent
(i: 21, j: 5)
Independent
(i: 21, j: 6)
Independent
(i: 21, j: 7)
Independent
(i: 21, j: 8)
Independent
(i: 21, j: 9)
Independent
(i: 21, j: 10)
Independent
(i: 21, j: 11)
Independent
(i: 21, j: 12)
Independent
(i: 21, j: 13)
Independent
(i: 21, j: 14)
Independent
(i: 21, j: 15)
Independent
(i: 21, j: 16)
Independent
(i: 21, j: 17)
Independent
(i: 21, j: 18)
Independent
(i: 21, j: 19)
Independent
(i: 21, j: 20)
Independent
(i: 21, j: 22)
Independent
(i: 21, j: 23)
Independent
(i: 21, j: 24)
Independent
(i: 21, j: 25)
Independent
(i: 21, j: 26)
Independent
(i: 22, j: 0)
Independent
(i: 22, j: 1)
Independent
(i: 22, j: 2)
Independent
(i: 22, j: 3)
Independent
(i: 22, j: 4)
Independent
(i: 22, j: 5)
Independent
(i: 22, j: 6)
Independent
(i: 22, j: 7)
Independent
(i: 22, j: 8)
Independent
(i: 22, j: 9)
Independent
(i: 22, j: 10)
Independent
(i: 22, j: 11)
Independent
(i: 22, j: 12)
Independent
(i: 22, j: 13)
Independent
(i: 22, j: 14)
Independent
(i: 22, j: 15)
Independent
(i: 22, j: 16)
Independent
(i: 22, j: 17)
Independent
(i: 22, j: 18)
Independent
(i: 22, j: 19)
Independent
(i: 22, j: 20)
Independent
(i: 22, j: 21)
Independent
(i: 22, j: 23)
Independent
(i: 22, j: 24)
Independent
(i: 22, j: 25)
Independent
(i: 22, j: 26)
Independent
(i: 23, j: 0)
Independent
(i: 23, j: 1)
Independent
(i: 23, j: 2)
Independent
(i: 23, j: 3)
Independent
(i: 23, j: 4)
Independent
(i: 23, j: 5)
Independent
(i: 23, j: 6)
Independent
(i: 23, j: 7)
Independent
(i: 23, j: 8)
Independent
(i: 23, j: 9)
Independent
(i: 23, j: 10)
Independent
(i: 23, j: 11)
Independent
(i: 23, j: 12)
Independent
(i: 23, j: 13)
Independent
(i: 23, j: 14)
Independent
(i: 23, j: 15)
Independent
(i: 23, j: 16)
Independent
(i: 23, j: 17)
Independent
(i: 23, j: 18)
Independent
(i: 23, j: 19)
Independent
(i: 23, j: 20)
Independent
(i: 23, j: 21)
Independent
(i: 23, j: 22)
Independent
(i: 23, j: 24)
Independent
(i: 23, j: 25)
Independent
(i: 23, j: 26)
Independent
(i: 24, j: 0)
Independent
(i: 24, j: 1)
Independent
(i: 24, j: 2)
Independent
(i: 24, j: 3)
Independent
(i: 24, j: 4)
Independent
(i: 24, j: 5)
Independent
(i: 24, j: 6)
Independent
(i: 24, j: 7)
Independent
(i: 24, j: 8)
Independent
(i: 24, j: 9)
Independent
(i: 24, j: 10)
Independent
(i: 24, j: 11)
Independent
(i: 24, j: 12)
Independent
(i: 24, j: 13)
Independent
(i: 24, j: 14)
Independent
(i: 24, j: 15)
Independent
(i: 24, j: 16)
Independent
(i: 24, j: 17)
Independent
(i: 24, j: 18)
Independent
(i: 24, j: 19)
Independent
(i: 24, j: 20)
Independent
(i: 24, j: 21)
Independent
(i: 24, j: 22)
Independent
(i: 24, j: 23)
Independent
(i: 24, j: 25)
Independent
(i: 24, j: 26)
Independent
(i: 25, j: 0)
Independent
(i: 25, j: 1)
Independent
(i: 25, j: 2)
Independent
(i: 25, j: 3)
Independent
(i: 25, j: 4)
Independent
(i: 25, j: 5)
Independent
(i: 25, j: 6)
Independent
(i: 25, j: 7)
Independent
(i: 25, j: 8)
Independent
(i: 25, j: 9)
Independent
(i: 25, j: 10)
Independent
(i: 25, j: 11)
Independent
(i: 25, j: 12)
Independent
(i: 25, j: 13)
Independent
(i: 25, j: 14)
Independent
(i: 25, j: 15)
Independent
(i: 25, j: 16)
Independent
(i: 25, j: 17)
Independent
(i: 25, j: 18)
Independent
(i: 25, j: 19)
Independent
(i: 25, j: 20)
Independent
(i: 25, j: 21)
Independent
(i: 25, j: 22)
Independent
(i: 25, j: 23)
Independent
(i: 25, j: 24)
Independent
(i: 25, j: 26)
Independent
(i: 26, j: 0)
Independent
(i: 26, j: 1)
Independent
(i: 26, j: 2)
Independent
(i: 26, j: 3)
Independent
(i: 26, j: 4)
Independent
(i: 26, j: 5)
Independent
(i: 26, j: 6)
Independent
(i: 26, j: 7)
Independent
(i: 26, j: 8)
Independent
(i: 26, j: 9)
Independent
(i: 26, j: 10)
Independent
(i: 26, j: 11)
Independent
(i: 26, j: 12)
Independent
(i: 26, j: 13)
Independent
(i: 26, j: 14)
Independent
(i: 26, j: 15)
Independent
(i: 26, j: 16)
Independent
(i: 26, j: 17)
Independent
(i: 26, j: 18)
Independent
(i: 26, j: 19)
Independent
(i: 26, j: 20)
Independent
(i: 26, j: 21)
Independent
(i: 26, j: 22)
Independent
(i: 26, j: 23)
Independent
(i: 26, j: 24)
Independent
(i: 26, j: 25)
Independent
Starting "optFederov" run
Using Search Space:
NULL
Correlation between variables in the dataset:
                 T1_I        T1_J          T1_K        T2_I          T2_J
T1_I     1.000000e+00  0.01800823  0.0229188641  0.11049519 -2.077059e-05
T1_J     1.800823e-02  1.00000000  0.0840730468  0.06776537  1.281829e-01
T1_K     2.291886e-02  0.08407305  1.0000000000  0.03334360  7.448043e-03
T2_I     1.104952e-01  0.06776537  0.0333436040  1.00000000  3.601159e-02
T2_J    -2.077059e-05  0.12818291  0.0074480427  0.03601159  1.000000e+00
T2_K    -1.632337e-02  0.03677069  0.0773409008 -0.08780769  2.996626e-02
ACOPY_x            NA          NA            NA          NA            NA
ACOPY_y  4.335435e-02 -0.07327350 -0.0379258580 -0.02077616 -3.411678e-03
U1_I               NA          NA            NA          NA            NA
U_I     -9.586514e-02 -0.01128276  0.0417248324  0.09158435  5.688606e-02
U_J      9.001683e-02  0.05132773 -0.0451959370 -0.05994455 -3.915898e-02
U_K                NA          NA            NA          NA            NA
RT_I    -6.526516e-02  0.08404666  0.0265327028 -0.01832178 -4.843796e-02
RT_J    -9.221370e-03  0.01526599 -0.0317588220 -0.01114731 -8.578594e-05
RT_K     3.503305e-02 -0.08992868 -0.0651721989  0.01106602 -1.469112e-02
SCR     -3.372543e-03 -0.04712358 -0.0002509105  0.06898479  5.279787e-02
VEC1     9.708928e-02 -0.02333946  0.0850257959 -0.00490660  1.995319e-02
VEC2     1.222879e-02  0.05844391 -0.0122317275  0.01095428  7.643244e-03
                T2_K ACOPY_x      ACOPY_y U1_I          U_I         U_J U_K
T1_I    -0.016323372      NA  0.043354347   NA -0.095865139  0.09001683  NA
T1_J     0.036770686      NA -0.073273500   NA -0.011282760  0.05132773  NA
T1_K     0.077340901      NA -0.037925858   NA  0.041724832 -0.04519594  NA
T2_I    -0.087807693      NA -0.020776157   NA  0.091584353 -0.05994455  NA
T2_J     0.029966261      NA -0.003411678   NA  0.056886060 -0.03915898  NA
T2_K     1.000000000      NA -0.016123833   NA -0.015878980 -0.04094478  NA
ACOPY_x           NA       1           NA   NA           NA          NA  NA
ACOPY_y -0.016123833      NA  1.000000000   NA  0.002465877 -0.04543299  NA
U1_I              NA      NA           NA    1           NA          NA  NA
U_I     -0.015878980      NA  0.002465877   NA  1.000000000 -0.61354467  NA
U_J     -0.040944780      NA -0.045432989   NA -0.613544666  1.00000000  NA
U_K               NA      NA           NA   NA           NA          NA   1
RT_I     0.040319191      NA -0.004714237   NA  0.016747329 -0.02889979  NA
RT_J    -0.045252859      NA -0.043649437   NA -0.026335200 -0.05009568  NA
RT_K     0.031225006      NA  0.019085238   NA -0.026410334  0.02869557  NA
SCR      0.004397779      NA -0.143501785   NA -0.036782154  0.01725052  NA
VEC1     0.030458480      NA  0.061101247   NA -0.120177866  0.04326170  NA
VEC2    -0.043648037      NA -0.005130634   NA  0.015419513 -0.02551629  NA
                RT_I          RT_J        RT_K           SCR        VEC1
T1_I    -0.065265160 -9.221370e-03  0.03503305 -0.0033725429  0.09708928
T1_J     0.084046660  1.526599e-02 -0.08992868 -0.0471235791 -0.02333946
T1_K     0.026532703 -3.175882e-02 -0.06517220 -0.0002509105  0.08502580
T2_I    -0.018321778 -1.114731e-02  0.01106602  0.0689847879 -0.00490660
T2_J    -0.048437957 -8.578594e-05 -0.01469112  0.0527978712  0.01995319
T2_K     0.040319191 -4.525286e-02  0.03122501  0.0043977786  0.03045848
ACOPY_x           NA            NA          NA            NA          NA
ACOPY_y -0.004714237 -4.364944e-02  0.01908524 -0.1435017846  0.06110125
U1_I              NA            NA          NA            NA          NA
U_I      0.016747329 -2.633520e-02 -0.02641033 -0.0367821541 -0.12017787
U_J     -0.028899791 -5.009568e-02  0.02869557  0.0172505189  0.04326170
U_K               NA            NA          NA            NA          NA
RT_I     1.000000000 -3.242677e-01 -0.36284607  0.0077177064  0.03735142
RT_J    -0.324267713  1.000000e+00 -0.38018358 -0.0189175606 -0.06297562
RT_K    -0.362846072 -3.801836e-01  1.00000000  0.0353105687  0.05750871
SCR      0.007717706 -1.891756e-02  0.03531057  1.0000000000  0.01546554
VEC1     0.037351423 -6.297562e-02  0.05750871  0.0154655445  1.00000000
VEC2     0.071843533  2.244752e-02 -0.10303335 -0.0102565451 -0.07180337
                VEC2
T1_I     0.012228791
T1_J     0.058443913
T1_K    -0.012231727
T2_I     0.010954281
T2_J     0.007643244
T2_K    -0.043648037
ACOPY_x           NA
ACOPY_y -0.005130634
U1_I              NA
U_I      0.015419513
U_J     -0.025516289
U_K               NA
RT_I     0.071843533
RT_J     0.022447520
RT_K    -0.103033354
SCR     -0.010256545
VEC1    -0.071803370
VEC2     1.000000000

    T1_I T1_J T1_K T2_I T2_J T2_K ACOPY_x ACOPY_y U1_I U_I U_J U_K RT_I RT_J
6      2    6    3    6    6    6       0       1   13  21   0   2    0    0
11     2    5    2    0    6    0       0       0   13   0  19   2    2    0
61     6    0    4    4    6    5       0       1   13   0   7   2    0    1
93     0    3    6    2    6    0       0       1   13  18   0   2    0    2
105    1    3    2    2    0    6       0       1   13   0  20   2    1    0
123    4    1    1    6    3    0       0       0   13   0  22   2    1    1
127    5    1    4    4    2    4       0       1   13   7   0   2    1    1
129    1    6    1    1    0    0       0       1   13   1   0   2    1    1
159    2    3    4    3    0    2       0       0   13  29   0   2    0    1
162    4    6    3    2    0    5       0       0   13   0   3   2    0    0
175    0    4    2    0    2    1       0       1   13   0  19   2    0    1
182    0    5    5    6    6    3       0       0   13   0  25   2    1    0
196    6    1    2    0    5    0       0       1   13   0  23   2    0    0
197    1    2    2    6    0    5       0       0   13  26   0   2    2    0
203    0    1    4    4    0    2       0       1   13   0   7   2    2    0
214    2    1    4    2    6    6       0       1   13   7   0   2    0    1
223    2    6    0    5    0    3       0       1   13   0  10   2    2    0
233    5    2    6    0    1    5       0       1   13   0   5   2    0    1
234    3    4    0    4    0    6       0       0   13   0   6   2    1    0
235    2    2    6    5    4    0       0       0   13  29   0   2    0    0
240    5    2    1    6    2    2       0       1   13   2   0   2    1    0
256    5    4    0    5    4    4       0       1   13  19   0   2    0    0
265    6    1    4    0    3    3       0       0   13   7   0   2    0    2
280    6    4    6    0    0    6       0       1   13  26   0   2    2    0
281    2    2    0    4    2    1       0       0   13  28   0   2    0    0
286    6    4    2    5    2    2       0       0   13   0  12   2    0    1
287    2    0    1    1    2    5       0       0   13  22   0   2    1    0
293    1    1    4    1    0    4       0       0   13   6   0   2    0    0
304    4    5    2    6    3    3       0       1   13  29   0   2    1    0
327    0    0    2    4    0    5       0       1   13   0   8   2    1    1
331    0    6    1    6    5    6       0       1   13   0  29   2    0    1
333    2    2    0    0    4    4       0       0   13   1   0   2    1    0
339    2    4    2    0    0    5       0       0   13   3   0   2    0    2
353    0    0    1    4    4    2       0       1   13   7   0   2    0    0
358    5    2    5    3    5    0       0       1   13   0  25   2    0    2
360    0    6    0    0    5    2       0       0   13  20   0   2    1    1
367    0    0    0    6    5    2       0       0   13   0   6   2    0    1
378    1    0    0    2    5    6       0       0   13  24   0   2    0    2
379    2    0    1    2    0    6       0       1   13   0  29   2    0    0
    RT_K SCR VEC1 VEC2
6      2   0    0    1
11     0   1    0    1
61     1   1    1    0
93     0   0    0    0
105    1   0    0    0
123    0   1    0    1
127    0   0    1    1
129    0   0    0    1
159    1   0    1    1
162    2   1    1    0
175    0   1    0    1
182    1   1    0    1
196    2   0    1    1
197    0   0    0    0
203    0   0    0    0
214    0   0    0    1
223    0   0    1    0
233    0   0    0    0
234    0   1    0    0
235    1   1    1    0
240    0   1    1    1
256    1   1    0    1
265    0   0    0    0
280    0   1    1    1
281    2   1    0    0
286    0   0    0    0
287    1   0    0    0
293    0   0    1    1
304    0   0    0    0
327    0   1    1    0
331    0   1    1    0
333    1   0    1    1
339    0   1    0    1
353    1   0    0    0
358    0   0    1    0
360    0   0    0    0
367    1   1    1    0
378    0   1    0    1
379    0   1    1    0

D-Efficiency Approximation: [1] 0.477

Measuring design of size 39
Current Design Names: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Initial Factors: ['T1_I', 'T1_J', 'T1_K', 'T2_I', 'T2_J', 'T2_K', 'ACOPY_x', 'ACOPY_y', 'U1_I', 'U_I', 'U_J', 'U_K', 'RT_I', 'RT_J', 'RT_K', 'SCR', 'VEC1', 'VEC2']
Length of requested configs: 1
Code stats:
        Number of loops: 	64
        Max loop nest depth: 	6
        Additions: 		6816
        Multiplications: 	1518
        Divisions: 		0
        Logical: 		0
        Reads: 			9816
        Writes: 		975
        Comparisons:		64
        Gotos: 			0
        
 building test:
	gcc -O3 -fopenmp -DDYNAMIC  -DORIO_REPS=30 -o __orio_perftest35.exe __orio_perftest35.c timer_cpu.o -lm
